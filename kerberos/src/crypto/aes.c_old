/**
* Implementacao baseada na versao de dominio publico 
* disponibilizada por Paulo S. L. M. Barreto em http://www.larc.usp.br/~pbarreto/AES++.zip
*/
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

#define __STDC_FORMAT_MACROS
#include <inttypes.h>

#include "aes.h" 
#include <errno.h>

#define FULL_UNROLL

#ifdef _MSC_VER
#define SWAP(x) (_lrotl(x, 8) & 0x00ff00ff | _lrotr(x, 8) & 0xff00ff00)
#define GETWORD(p) SWAP(*((uint32_t *)(p)))
#define PUTWORD(ct, st) (*((uint32_t *)(ct)) = SWAP((st)))
#else
#define GETWORD(pt) (((uint32_t)(pt)[0] << 24) ^ ((uint32_t)(pt)[1] << 16) ^ ((uint32_t)(pt)[2] <<  8) ^ ((uint32_t)(pt)[3]))
#define PUTWORD(ct, st) ((ct)[0] = (byte)((st) >> 24), (ct)[1] = (byte)((st) >> 16), (ct)[2] = (byte)((st) >>  8), (ct)[3] = (byte)(st)/*, (s)*/)
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////


static const uint32_t Te0[256] = {
	0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,
	0xfff2f20dU, 0xd66b6bbdU, 0xde6f6fb1U, 0x91c5c554U,
	0x60303050U, 0x02010103U, 0xce6767a9U, 0x562b2b7dU,
	0xe7fefe19U, 0xb5d7d762U, 0x4dababe6U, 0xec76769aU,
	0x8fcaca45U, 0x1f82829dU, 0x89c9c940U, 0xfa7d7d87U,
	0xeffafa15U, 0xb25959ebU, 0x8e4747c9U, 0xfbf0f00bU,
	0x41adadecU, 0xb3d4d467U, 0x5fa2a2fdU, 0x45afafeaU,
	0x239c9cbfU, 0x53a4a4f7U, 0xe4727296U, 0x9bc0c05bU,
	0x75b7b7c2U, 0xe1fdfd1cU, 0x3d9393aeU, 0x4c26266aU,
	0x6c36365aU, 0x7e3f3f41U, 0xf5f7f702U, 0x83cccc4fU,
	0x6834345cU, 0x51a5a5f4U, 0xd1e5e534U, 0xf9f1f108U,
	0xe2717193U, 0xabd8d873U, 0x62313153U, 0x2a15153fU,
	0x0804040cU, 0x95c7c752U, 0x46232365U, 0x9dc3c35eU,
	0x30181828U, 0x379696a1U, 0x0a05050fU, 0x2f9a9ab5U,
	0x0e070709U, 0x24121236U, 0x1b80809bU, 0xdfe2e23dU,
	0xcdebeb26U, 0x4e272769U, 0x7fb2b2cdU, 0xea75759fU,
	0x1209091bU, 0x1d83839eU, 0x582c2c74U, 0x341a1a2eU,
	0x361b1b2dU, 0xdc6e6eb2U, 0xb45a5aeeU, 0x5ba0a0fbU,
	0xa45252f6U, 0x763b3b4dU, 0xb7d6d661U, 0x7db3b3ceU,
	0x5229297bU, 0xdde3e33eU, 0x5e2f2f71U, 0x13848497U,
	0xa65353f5U, 0xb9d1d168U, 0x00000000U, 0xc1eded2cU,
	0x40202060U, 0xe3fcfc1fU, 0x79b1b1c8U, 0xb65b5bedU,
	0xd46a6abeU, 0x8dcbcb46U, 0x67bebed9U, 0x7239394bU,
	0x944a4adeU, 0x984c4cd4U, 0xb05858e8U, 0x85cfcf4aU,
	0xbbd0d06bU, 0xc5efef2aU, 0x4faaaae5U, 0xedfbfb16U,
	0x864343c5U, 0x9a4d4dd7U, 0x66333355U, 0x11858594U,
	0x8a4545cfU, 0xe9f9f910U, 0x04020206U, 0xfe7f7f81U,
	0xa05050f0U, 0x783c3c44U, 0x259f9fbaU, 0x4ba8a8e3U,
	0xa25151f3U, 0x5da3a3feU, 0x804040c0U, 0x058f8f8aU,
	0x3f9292adU, 0x219d9dbcU, 0x70383848U, 0xf1f5f504U,
	0x63bcbcdfU, 0x77b6b6c1U, 0xafdada75U, 0x42212163U,
	0x20101030U, 0xe5ffff1aU, 0xfdf3f30eU, 0xbfd2d26dU,
	0x81cdcd4cU, 0x180c0c14U, 0x26131335U, 0xc3ecec2fU,
	0xbe5f5fe1U, 0x359797a2U, 0x884444ccU, 0x2e171739U,
	0x93c4c457U, 0x55a7a7f2U, 0xfc7e7e82U, 0x7a3d3d47U,
	0xc86464acU, 0xba5d5de7U, 0x3219192bU, 0xe6737395U,
	0xc06060a0U, 0x19818198U, 0x9e4f4fd1U, 0xa3dcdc7fU,
	0x44222266U, 0x542a2a7eU, 0x3b9090abU, 0x0b888883U,
	0x8c4646caU, 0xc7eeee29U, 0x6bb8b8d3U, 0x2814143cU,
	0xa7dede79U, 0xbc5e5ee2U, 0x160b0b1dU, 0xaddbdb76U,
	0xdbe0e03bU, 0x64323256U, 0x743a3a4eU, 0x140a0a1eU,
	0x924949dbU, 0x0c06060aU, 0x4824246cU, 0xb85c5ce4U,
	0x9fc2c25dU, 0xbdd3d36eU, 0x43acacefU, 0xc46262a6U,
	0x399191a8U, 0x319595a4U, 0xd3e4e437U, 0xf279798bU,
	0xd5e7e732U, 0x8bc8c843U, 0x6e373759U, 0xda6d6db7U,
	0x018d8d8cU, 0xb1d5d564U, 0x9c4e4ed2U, 0x49a9a9e0U,
	0xd86c6cb4U, 0xac5656faU, 0xf3f4f407U, 0xcfeaea25U,
	0xca6565afU, 0xf47a7a8eU, 0x47aeaee9U, 0x10080818U,
	0x6fbabad5U, 0xf0787888U, 0x4a25256fU, 0x5c2e2e72U,
	0x381c1c24U, 0x57a6a6f1U, 0x73b4b4c7U, 0x97c6c651U,
	0xcbe8e823U, 0xa1dddd7cU, 0xe874749cU, 0x3e1f1f21U,
	0x964b4bddU, 0x61bdbddcU, 0x0d8b8b86U, 0x0f8a8a85U,
	0xe0707090U, 0x7c3e3e42U, 0x71b5b5c4U, 0xcc6666aaU,
	0x904848d8U, 0x06030305U, 0xf7f6f601U, 0x1c0e0e12U,
	0xc26161a3U, 0x6a35355fU, 0xae5757f9U, 0x69b9b9d0U,
	0x17868691U, 0x99c1c158U, 0x3a1d1d27U, 0x279e9eb9U,
	0xd9e1e138U, 0xebf8f813U, 0x2b9898b3U, 0x22111133U,
	0xd26969bbU, 0xa9d9d970U, 0x078e8e89U, 0x339494a7U,
	0x2d9b9bb6U, 0x3c1e1e22U, 0x15878792U, 0xc9e9e920U,
	0x87cece49U, 0xaa5555ffU, 0x50282878U, 0xa5dfdf7aU,
	0x038c8c8fU, 0x59a1a1f8U, 0x09898980U, 0x1a0d0d17U,
	0x65bfbfdaU, 0xd7e6e631U, 0x844242c6U, 0xd06868b8U,
	0x824141c3U, 0x299999b0U, 0x5a2d2d77U, 0x1e0f0f11U,
	0x7bb0b0cbU, 0xa85454fcU, 0x6dbbbbd6U, 0x2c16163aU,
};
static const uint32_t Te1[256] = {
	0xa5c66363U, 0x84f87c7cU, 0x99ee7777U, 0x8df67b7bU,
	0x0dfff2f2U, 0xbdd66b6bU, 0xb1de6f6fU, 0x5491c5c5U,
	0x50603030U, 0x03020101U, 0xa9ce6767U, 0x7d562b2bU,
	0x19e7fefeU, 0x62b5d7d7U, 0xe64dababU, 0x9aec7676U,
	0x458fcacaU, 0x9d1f8282U, 0x4089c9c9U, 0x87fa7d7dU,
	0x15effafaU, 0xebb25959U, 0xc98e4747U, 0x0bfbf0f0U,
	0xec41adadU, 0x67b3d4d4U, 0xfd5fa2a2U, 0xea45afafU,
	0xbf239c9cU, 0xf753a4a4U, 0x96e47272U, 0x5b9bc0c0U,
	0xc275b7b7U, 0x1ce1fdfdU, 0xae3d9393U, 0x6a4c2626U,
	0x5a6c3636U, 0x417e3f3fU, 0x02f5f7f7U, 0x4f83ccccU,
	0x5c683434U, 0xf451a5a5U, 0x34d1e5e5U, 0x08f9f1f1U,
	0x93e27171U, 0x73abd8d8U, 0x53623131U, 0x3f2a1515U,
	0x0c080404U, 0x5295c7c7U, 0x65462323U, 0x5e9dc3c3U,
	0x28301818U, 0xa1379696U, 0x0f0a0505U, 0xb52f9a9aU,
	0x090e0707U, 0x36241212U, 0x9b1b8080U, 0x3ddfe2e2U,
	0x26cdebebU, 0x694e2727U, 0xcd7fb2b2U, 0x9fea7575U,
	0x1b120909U, 0x9e1d8383U, 0x74582c2cU, 0x2e341a1aU,
	0x2d361b1bU, 0xb2dc6e6eU, 0xeeb45a5aU, 0xfb5ba0a0U,
	0xf6a45252U, 0x4d763b3bU, 0x61b7d6d6U, 0xce7db3b3U,
	0x7b522929U, 0x3edde3e3U, 0x715e2f2fU, 0x97138484U,
	0xf5a65353U, 0x68b9d1d1U, 0x00000000U, 0x2cc1ededU,
	0x60402020U, 0x1fe3fcfcU, 0xc879b1b1U, 0xedb65b5bU,
	0xbed46a6aU, 0x468dcbcbU, 0xd967bebeU, 0x4b723939U,
	0xde944a4aU, 0xd4984c4cU, 0xe8b05858U, 0x4a85cfcfU,
	0x6bbbd0d0U, 0x2ac5efefU, 0xe54faaaaU, 0x16edfbfbU,
	0xc5864343U, 0xd79a4d4dU, 0x55663333U, 0x94118585U,
	0xcf8a4545U, 0x10e9f9f9U, 0x06040202U, 0x81fe7f7fU,
	0xf0a05050U, 0x44783c3cU, 0xba259f9fU, 0xe34ba8a8U,
	0xf3a25151U, 0xfe5da3a3U, 0xc0804040U, 0x8a058f8fU,
	0xad3f9292U, 0xbc219d9dU, 0x48703838U, 0x04f1f5f5U,
	0xdf63bcbcU, 0xc177b6b6U, 0x75afdadaU, 0x63422121U,
	0x30201010U, 0x1ae5ffffU, 0x0efdf3f3U, 0x6dbfd2d2U,
	0x4c81cdcdU, 0x14180c0cU, 0x35261313U, 0x2fc3ececU,
	0xe1be5f5fU, 0xa2359797U, 0xcc884444U, 0x392e1717U,
	0x5793c4c4U, 0xf255a7a7U, 0x82fc7e7eU, 0x477a3d3dU,
	0xacc86464U, 0xe7ba5d5dU, 0x2b321919U, 0x95e67373U,
	0xa0c06060U, 0x98198181U, 0xd19e4f4fU, 0x7fa3dcdcU,
	0x66442222U, 0x7e542a2aU, 0xab3b9090U, 0x830b8888U,
	0xca8c4646U, 0x29c7eeeeU, 0xd36bb8b8U, 0x3c281414U,
	0x79a7dedeU, 0xe2bc5e5eU, 0x1d160b0bU, 0x76addbdbU,
	0x3bdbe0e0U, 0x56643232U, 0x4e743a3aU, 0x1e140a0aU,
	0xdb924949U, 0x0a0c0606U, 0x6c482424U, 0xe4b85c5cU,
	0x5d9fc2c2U, 0x6ebdd3d3U, 0xef43acacU, 0xa6c46262U,
	0xa8399191U, 0xa4319595U, 0x37d3e4e4U, 0x8bf27979U,
	0x32d5e7e7U, 0x438bc8c8U, 0x596e3737U, 0xb7da6d6dU,
	0x8c018d8dU, 0x64b1d5d5U, 0xd29c4e4eU, 0xe049a9a9U,
	0xb4d86c6cU, 0xfaac5656U, 0x07f3f4f4U, 0x25cfeaeaU,
	0xafca6565U, 0x8ef47a7aU, 0xe947aeaeU, 0x18100808U,
	0xd56fbabaU, 0x88f07878U, 0x6f4a2525U, 0x725c2e2eU,
	0x24381c1cU, 0xf157a6a6U, 0xc773b4b4U, 0x5197c6c6U,
	0x23cbe8e8U, 0x7ca1ddddU, 0x9ce87474U, 0x213e1f1fU,
	0xdd964b4bU, 0xdc61bdbdU, 0x860d8b8bU, 0x850f8a8aU,
	0x90e07070U, 0x427c3e3eU, 0xc471b5b5U, 0xaacc6666U,
	0xd8904848U, 0x05060303U, 0x01f7f6f6U, 0x121c0e0eU,
	0xa3c26161U, 0x5f6a3535U, 0xf9ae5757U, 0xd069b9b9U,
	0x91178686U, 0x5899c1c1U, 0x273a1d1dU, 0xb9279e9eU,
	0x38d9e1e1U, 0x13ebf8f8U, 0xb32b9898U, 0x33221111U,
	0xbbd26969U, 0x70a9d9d9U, 0x89078e8eU, 0xa7339494U,
	0xb62d9b9bU, 0x223c1e1eU, 0x92158787U, 0x20c9e9e9U,
	0x4987ceceU, 0xffaa5555U, 0x78502828U, 0x7aa5dfdfU,
	0x8f038c8cU, 0xf859a1a1U, 0x80098989U, 0x171a0d0dU,
	0xda65bfbfU, 0x31d7e6e6U, 0xc6844242U, 0xb8d06868U,
	0xc3824141U, 0xb0299999U, 0x775a2d2dU, 0x111e0f0fU,
	0xcb7bb0b0U, 0xfca85454U, 0xd66dbbbbU, 0x3a2c1616U,
};
static const uint32_t Te2[256] = {
	0x63a5c663U, 0x7c84f87cU, 0x7799ee77U, 0x7b8df67bU,
	0xf20dfff2U, 0x6bbdd66bU, 0x6fb1de6fU, 0xc55491c5U,
	0x30506030U, 0x01030201U, 0x67a9ce67U, 0x2b7d562bU,
	0xfe19e7feU, 0xd762b5d7U, 0xabe64dabU, 0x769aec76U,
	0xca458fcaU, 0x829d1f82U, 0xc94089c9U, 0x7d87fa7dU,
	0xfa15effaU, 0x59ebb259U, 0x47c98e47U, 0xf00bfbf0U,
	0xadec41adU, 0xd467b3d4U, 0xa2fd5fa2U, 0xafea45afU,
	0x9cbf239cU, 0xa4f753a4U, 0x7296e472U, 0xc05b9bc0U,
	0xb7c275b7U, 0xfd1ce1fdU, 0x93ae3d93U, 0x266a4c26U,
	0x365a6c36U, 0x3f417e3fU, 0xf702f5f7U, 0xcc4f83ccU,
	0x345c6834U, 0xa5f451a5U, 0xe534d1e5U, 0xf108f9f1U,
	0x7193e271U, 0xd873abd8U, 0x31536231U, 0x153f2a15U,
	0x040c0804U, 0xc75295c7U, 0x23654623U, 0xc35e9dc3U,
	0x18283018U, 0x96a13796U, 0x050f0a05U, 0x9ab52f9aU,
	0x07090e07U, 0x12362412U, 0x809b1b80U, 0xe23ddfe2U,
	0xeb26cdebU, 0x27694e27U, 0xb2cd7fb2U, 0x759fea75U,
	0x091b1209U, 0x839e1d83U, 0x2c74582cU, 0x1a2e341aU,
	0x1b2d361bU, 0x6eb2dc6eU, 0x5aeeb45aU, 0xa0fb5ba0U,
	0x52f6a452U, 0x3b4d763bU, 0xd661b7d6U, 0xb3ce7db3U,
	0x297b5229U, 0xe33edde3U, 0x2f715e2fU, 0x84971384U,
	0x53f5a653U, 0xd168b9d1U, 0x00000000U, 0xed2cc1edU,
	0x20604020U, 0xfc1fe3fcU, 0xb1c879b1U, 0x5bedb65bU,
	0x6abed46aU, 0xcb468dcbU, 0xbed967beU, 0x394b7239U,
	0x4ade944aU, 0x4cd4984cU, 0x58e8b058U, 0xcf4a85cfU,
	0xd06bbbd0U, 0xef2ac5efU, 0xaae54faaU, 0xfb16edfbU,
	0x43c58643U, 0x4dd79a4dU, 0x33556633U, 0x85941185U,
	0x45cf8a45U, 0xf910e9f9U, 0x02060402U, 0x7f81fe7fU,
	0x50f0a050U, 0x3c44783cU, 0x9fba259fU, 0xa8e34ba8U,
	0x51f3a251U, 0xa3fe5da3U, 0x40c08040U, 0x8f8a058fU,
	0x92ad3f92U, 0x9dbc219dU, 0x38487038U, 0xf504f1f5U,
	0xbcdf63bcU, 0xb6c177b6U, 0xda75afdaU, 0x21634221U,
	0x10302010U, 0xff1ae5ffU, 0xf30efdf3U, 0xd26dbfd2U,
	0xcd4c81cdU, 0x0c14180cU, 0x13352613U, 0xec2fc3ecU,
	0x5fe1be5fU, 0x97a23597U, 0x44cc8844U, 0x17392e17U,
	0xc45793c4U, 0xa7f255a7U, 0x7e82fc7eU, 0x3d477a3dU,
	0x64acc864U, 0x5de7ba5dU, 0x192b3219U, 0x7395e673U,
	0x60a0c060U, 0x81981981U, 0x4fd19e4fU, 0xdc7fa3dcU,
	0x22664422U, 0x2a7e542aU, 0x90ab3b90U, 0x88830b88U,
	0x46ca8c46U, 0xee29c7eeU, 0xb8d36bb8U, 0x143c2814U,
	0xde79a7deU, 0x5ee2bc5eU, 0x0b1d160bU, 0xdb76addbU,
	0xe03bdbe0U, 0x32566432U, 0x3a4e743aU, 0x0a1e140aU,
	0x49db9249U, 0x060a0c06U, 0x246c4824U, 0x5ce4b85cU,
	0xc25d9fc2U, 0xd36ebdd3U, 0xacef43acU, 0x62a6c462U,
	0x91a83991U, 0x95a43195U, 0xe437d3e4U, 0x798bf279U,
	0xe732d5e7U, 0xc8438bc8U, 0x37596e37U, 0x6db7da6dU,
	0x8d8c018dU, 0xd564b1d5U, 0x4ed29c4eU, 0xa9e049a9U,
	0x6cb4d86cU, 0x56faac56U, 0xf407f3f4U, 0xea25cfeaU,
	0x65afca65U, 0x7a8ef47aU, 0xaee947aeU, 0x08181008U,
	0xbad56fbaU, 0x7888f078U, 0x256f4a25U, 0x2e725c2eU,
	0x1c24381cU, 0xa6f157a6U, 0xb4c773b4U, 0xc65197c6U,
	0xe823cbe8U, 0xdd7ca1ddU, 0x749ce874U, 0x1f213e1fU,
	0x4bdd964bU, 0xbddc61bdU, 0x8b860d8bU, 0x8a850f8aU,
	0x7090e070U, 0x3e427c3eU, 0xb5c471b5U, 0x66aacc66U,
	0x48d89048U, 0x03050603U, 0xf601f7f6U, 0x0e121c0eU,
	0x61a3c261U, 0x355f6a35U, 0x57f9ae57U, 0xb9d069b9U,
	0x86911786U, 0xc15899c1U, 0x1d273a1dU, 0x9eb9279eU,
	0xe138d9e1U, 0xf813ebf8U, 0x98b32b98U, 0x11332211U,
	0x69bbd269U, 0xd970a9d9U, 0x8e89078eU, 0x94a73394U,
	0x9bb62d9bU, 0x1e223c1eU, 0x87921587U, 0xe920c9e9U,
	0xce4987ceU, 0x55ffaa55U, 0x28785028U, 0xdf7aa5dfU,
	0x8c8f038cU, 0xa1f859a1U, 0x89800989U, 0x0d171a0dU,
	0xbfda65bfU, 0xe631d7e6U, 0x42c68442U, 0x68b8d068U,
	0x41c38241U, 0x99b02999U, 0x2d775a2dU, 0x0f111e0fU,
	0xb0cb7bb0U, 0x54fca854U, 0xbbd66dbbU, 0x163a2c16U,
};
static const uint32_t Te3[256] = {

	0x6363a5c6U, 0x7c7c84f8U, 0x777799eeU, 0x7b7b8df6U,
	0xf2f20dffU, 0x6b6bbdd6U, 0x6f6fb1deU, 0xc5c55491U,
	0x30305060U, 0x01010302U, 0x6767a9ceU, 0x2b2b7d56U,
	0xfefe19e7U, 0xd7d762b5U, 0xababe64dU, 0x76769aecU,
	0xcaca458fU, 0x82829d1fU, 0xc9c94089U, 0x7d7d87faU,
	0xfafa15efU, 0x5959ebb2U, 0x4747c98eU, 0xf0f00bfbU,
	0xadadec41U, 0xd4d467b3U, 0xa2a2fd5fU, 0xafafea45U,
	0x9c9cbf23U, 0xa4a4f753U, 0x727296e4U, 0xc0c05b9bU,
	0xb7b7c275U, 0xfdfd1ce1U, 0x9393ae3dU, 0x26266a4cU,
	0x36365a6cU, 0x3f3f417eU, 0xf7f702f5U, 0xcccc4f83U,
	0x34345c68U, 0xa5a5f451U, 0xe5e534d1U, 0xf1f108f9U,
	0x717193e2U, 0xd8d873abU, 0x31315362U, 0x15153f2aU,
	0x04040c08U, 0xc7c75295U, 0x23236546U, 0xc3c35e9dU,
	0x18182830U, 0x9696a137U, 0x05050f0aU, 0x9a9ab52fU,
	0x0707090eU, 0x12123624U, 0x80809b1bU, 0xe2e23ddfU,
	0xebeb26cdU, 0x2727694eU, 0xb2b2cd7fU, 0x75759feaU,
	0x09091b12U, 0x83839e1dU, 0x2c2c7458U, 0x1a1a2e34U,
	0x1b1b2d36U, 0x6e6eb2dcU, 0x5a5aeeb4U, 0xa0a0fb5bU,
	0x5252f6a4U, 0x3b3b4d76U, 0xd6d661b7U, 0xb3b3ce7dU,
	0x29297b52U, 0xe3e33eddU, 0x2f2f715eU, 0x84849713U,
	0x5353f5a6U, 0xd1d168b9U, 0x00000000U, 0xeded2cc1U,
	0x20206040U, 0xfcfc1fe3U, 0xb1b1c879U, 0x5b5bedb6U,
	0x6a6abed4U, 0xcbcb468dU, 0xbebed967U, 0x39394b72U,
	0x4a4ade94U, 0x4c4cd498U, 0x5858e8b0U, 0xcfcf4a85U,
	0xd0d06bbbU, 0xefef2ac5U, 0xaaaae54fU, 0xfbfb16edU,
	0x4343c586U, 0x4d4dd79aU, 0x33335566U, 0x85859411U,
	0x4545cf8aU, 0xf9f910e9U, 0x02020604U, 0x7f7f81feU,
	0x5050f0a0U, 0x3c3c4478U, 0x9f9fba25U, 0xa8a8e34bU,
	0x5151f3a2U, 0xa3a3fe5dU, 0x4040c080U, 0x8f8f8a05U,
	0x9292ad3fU, 0x9d9dbc21U, 0x38384870U, 0xf5f504f1U,
	0xbcbcdf63U, 0xb6b6c177U, 0xdada75afU, 0x21216342U,
	0x10103020U, 0xffff1ae5U, 0xf3f30efdU, 0xd2d26dbfU,
	0xcdcd4c81U, 0x0c0c1418U, 0x13133526U, 0xecec2fc3U,
	0x5f5fe1beU, 0x9797a235U, 0x4444cc88U, 0x1717392eU,
	0xc4c45793U, 0xa7a7f255U, 0x7e7e82fcU, 0x3d3d477aU,
	0x6464acc8U, 0x5d5de7baU, 0x19192b32U, 0x737395e6U,
	0x6060a0c0U, 0x81819819U, 0x4f4fd19eU, 0xdcdc7fa3U,
	0x22226644U, 0x2a2a7e54U, 0x9090ab3bU, 0x8888830bU,
	0x4646ca8cU, 0xeeee29c7U, 0xb8b8d36bU, 0x14143c28U,
	0xdede79a7U, 0x5e5ee2bcU, 0x0b0b1d16U, 0xdbdb76adU,
	0xe0e03bdbU, 0x32325664U, 0x3a3a4e74U, 0x0a0a1e14U,
	0x4949db92U, 0x06060a0cU, 0x24246c48U, 0x5c5ce4b8U,
	0xc2c25d9fU, 0xd3d36ebdU, 0xacacef43U, 0x6262a6c4U,
	0x9191a839U, 0x9595a431U, 0xe4e437d3U, 0x79798bf2U,
	0xe7e732d5U, 0xc8c8438bU, 0x3737596eU, 0x6d6db7daU,
	0x8d8d8c01U, 0xd5d564b1U, 0x4e4ed29cU, 0xa9a9e049U,
	0x6c6cb4d8U, 0x5656faacU, 0xf4f407f3U, 0xeaea25cfU,
	0x6565afcaU, 0x7a7a8ef4U, 0xaeaee947U, 0x08081810U,
	0xbabad56fU, 0x787888f0U, 0x25256f4aU, 0x2e2e725cU,
	0x1c1c2438U, 0xa6a6f157U, 0xb4b4c773U, 0xc6c65197U,
	0xe8e823cbU, 0xdddd7ca1U, 0x74749ce8U, 0x1f1f213eU,
	0x4b4bdd96U, 0xbdbddc61U, 0x8b8b860dU, 0x8a8a850fU,
	0x707090e0U, 0x3e3e427cU, 0xb5b5c471U, 0x6666aaccU,
	0x4848d890U, 0x03030506U, 0xf6f601f7U, 0x0e0e121cU,
	0x6161a3c2U, 0x35355f6aU, 0x5757f9aeU, 0xb9b9d069U,
	0x86869117U, 0xc1c15899U, 0x1d1d273aU, 0x9e9eb927U,
	0xe1e138d9U, 0xf8f813ebU, 0x9898b32bU, 0x11113322U,
	0x6969bbd2U, 0xd9d970a9U, 0x8e8e8907U, 0x9494a733U,
	0x9b9bb62dU, 0x1e1e223cU, 0x87879215U, 0xe9e920c9U,
	0xcece4987U, 0x5555ffaaU, 0x28287850U, 0xdfdf7aa5U,
	0x8c8c8f03U, 0xa1a1f859U, 0x89898009U, 0x0d0d171aU,
	0xbfbfda65U, 0xe6e631d7U, 0x4242c684U, 0x6868b8d0U,
	0x4141c382U, 0x9999b029U, 0x2d2d775aU, 0x0f0f111eU,
	0xb0b0cb7bU, 0x5454fca8U, 0xbbbbd66dU, 0x16163a2cU,
};
static const uint32_t Te4[256] = {
	0x63636363U, 0x7c7c7c7cU, 0x77777777U, 0x7b7b7b7bU,
	0xf2f2f2f2U, 0x6b6b6b6bU, 0x6f6f6f6fU, 0xc5c5c5c5U,
	0x30303030U, 0x01010101U, 0x67676767U, 0x2b2b2b2bU,
	0xfefefefeU, 0xd7d7d7d7U, 0xababababU, 0x76767676U,
	0xcacacacaU, 0x82828282U, 0xc9c9c9c9U, 0x7d7d7d7dU,
	0xfafafafaU, 0x59595959U, 0x47474747U, 0xf0f0f0f0U,
	0xadadadadU, 0xd4d4d4d4U, 0xa2a2a2a2U, 0xafafafafU,
	0x9c9c9c9cU, 0xa4a4a4a4U, 0x72727272U, 0xc0c0c0c0U,
	0xb7b7b7b7U, 0xfdfdfdfdU, 0x93939393U, 0x26262626U,
	0x36363636U, 0x3f3f3f3fU, 0xf7f7f7f7U, 0xccccccccU,
	0x34343434U, 0xa5a5a5a5U, 0xe5e5e5e5U, 0xf1f1f1f1U,
	0x71717171U, 0xd8d8d8d8U, 0x31313131U, 0x15151515U,
	0x04040404U, 0xc7c7c7c7U, 0x23232323U, 0xc3c3c3c3U,
	0x18181818U, 0x96969696U, 0x05050505U, 0x9a9a9a9aU,
	0x07070707U, 0x12121212U, 0x80808080U, 0xe2e2e2e2U,
	0xebebebebU, 0x27272727U, 0xb2b2b2b2U, 0x75757575U,
	0x09090909U, 0x83838383U, 0x2c2c2c2cU, 0x1a1a1a1aU,
	0x1b1b1b1bU, 0x6e6e6e6eU, 0x5a5a5a5aU, 0xa0a0a0a0U,
	0x52525252U, 0x3b3b3b3bU, 0xd6d6d6d6U, 0xb3b3b3b3U,
	0x29292929U, 0xe3e3e3e3U, 0x2f2f2f2fU, 0x84848484U,
	0x53535353U, 0xd1d1d1d1U, 0x00000000U, 0xededededU,
	0x20202020U, 0xfcfcfcfcU, 0xb1b1b1b1U, 0x5b5b5b5bU,
	0x6a6a6a6aU, 0xcbcbcbcbU, 0xbebebebeU, 0x39393939U,
	0x4a4a4a4aU, 0x4c4c4c4cU, 0x58585858U, 0xcfcfcfcfU,
	0xd0d0d0d0U, 0xefefefefU, 0xaaaaaaaaU, 0xfbfbfbfbU,
	0x43434343U, 0x4d4d4d4dU, 0x33333333U, 0x85858585U,
	0x45454545U, 0xf9f9f9f9U, 0x02020202U, 0x7f7f7f7fU,
	0x50505050U, 0x3c3c3c3cU, 0x9f9f9f9fU, 0xa8a8a8a8U,
	0x51515151U, 0xa3a3a3a3U, 0x40404040U, 0x8f8f8f8fU,
	0x92929292U, 0x9d9d9d9dU, 0x38383838U, 0xf5f5f5f5U,
	0xbcbcbcbcU, 0xb6b6b6b6U, 0xdadadadaU, 0x21212121U,
	0x10101010U, 0xffffffffU, 0xf3f3f3f3U, 0xd2d2d2d2U,
	0xcdcdcdcdU, 0x0c0c0c0cU, 0x13131313U, 0xececececU,
	0x5f5f5f5fU, 0x97979797U, 0x44444444U, 0x17171717U,
	0xc4c4c4c4U, 0xa7a7a7a7U, 0x7e7e7e7eU, 0x3d3d3d3dU,
	0x64646464U, 0x5d5d5d5dU, 0x19191919U, 0x73737373U,
	0x60606060U, 0x81818181U, 0x4f4f4f4fU, 0xdcdcdcdcU,
	0x22222222U, 0x2a2a2a2aU, 0x90909090U, 0x88888888U,
	0x46464646U, 0xeeeeeeeeU, 0xb8b8b8b8U, 0x14141414U,
	0xdedededeU, 0x5e5e5e5eU, 0x0b0b0b0bU, 0xdbdbdbdbU,
	0xe0e0e0e0U, 0x32323232U, 0x3a3a3a3aU, 0x0a0a0a0aU,
	0x49494949U, 0x06060606U, 0x24242424U, 0x5c5c5c5cU,
	0xc2c2c2c2U, 0xd3d3d3d3U, 0xacacacacU, 0x62626262U,
	0x91919191U, 0x95959595U, 0xe4e4e4e4U, 0x79797979U,
	0xe7e7e7e7U, 0xc8c8c8c8U, 0x37373737U, 0x6d6d6d6dU,
	0x8d8d8d8dU, 0xd5d5d5d5U, 0x4e4e4e4eU, 0xa9a9a9a9U,
	0x6c6c6c6cU, 0x56565656U, 0xf4f4f4f4U, 0xeaeaeaeaU,
	0x65656565U, 0x7a7a7a7aU, 0xaeaeaeaeU, 0x08080808U,
	0xbabababaU, 0x78787878U, 0x25252525U, 0x2e2e2e2eU,
	0x1c1c1c1cU, 0xa6a6a6a6U, 0xb4b4b4b4U, 0xc6c6c6c6U,
	0xe8e8e8e8U, 0xddddddddU, 0x74747474U, 0x1f1f1f1fU,
	0x4b4b4b4bU, 0xbdbdbdbdU, 0x8b8b8b8bU, 0x8a8a8a8aU,
	0x70707070U, 0x3e3e3e3eU, 0xb5b5b5b5U, 0x66666666U,
	0x48484848U, 0x03030303U, 0xf6f6f6f6U, 0x0e0e0e0eU,
	0x61616161U, 0x35353535U, 0x57575757U, 0xb9b9b9b9U,
	0x86868686U, 0xc1c1c1c1U, 0x1d1d1d1dU, 0x9e9e9e9eU,
	0xe1e1e1e1U, 0xf8f8f8f8U, 0x98989898U, 0x11111111U,
	0x69696969U, 0xd9d9d9d9U, 0x8e8e8e8eU, 0x94949494U,
	0x9b9b9b9bU, 0x1e1e1e1eU, 0x87878787U, 0xe9e9e9e9U,
	0xcecececeU, 0x55555555U, 0x28282828U, 0xdfdfdfdfU,
	0x8c8c8c8cU, 0xa1a1a1a1U, 0x89898989U, 0x0d0d0d0dU,
	0xbfbfbfbfU, 0xe6e6e6e6U, 0x42424242U, 0x68686868U,
	0x41414141U, 0x99999999U, 0x2d2d2d2dU, 0x0f0f0f0fU,
	0xb0b0b0b0U, 0x54545454U, 0xbbbbbbbbU, 0x16161616U,
};
static const uint32_t Td0[256] = {
	0x51f4a750U, 0x7e416553U, 0x1a17a4c3U, 0x3a275e96U,
	0x3bab6bcbU, 0x1f9d45f1U, 0xacfa58abU, 0x4be30393U,
	0x2030fa55U, 0xad766df6U, 0x88cc7691U, 0xf5024c25U,
	0x4fe5d7fcU, 0xc52acbd7U, 0x26354480U, 0xb562a38fU,
	0xdeb15a49U, 0x25ba1b67U, 0x45ea0e98U, 0x5dfec0e1U,
	0xc32f7502U, 0x814cf012U, 0x8d4697a3U, 0x6bd3f9c6U,
	0x038f5fe7U, 0x15929c95U, 0xbf6d7aebU, 0x955259daU,
	0xd4be832dU, 0x587421d3U, 0x49e06929U, 0x8ec9c844U,
	0x75c2896aU, 0xf48e7978U, 0x99583e6bU, 0x27b971ddU,
	0xbee14fb6U, 0xf088ad17U, 0xc920ac66U, 0x7dce3ab4U,
	0x63df4a18U, 0xe51a3182U, 0x97513360U, 0x62537f45U,
	0xb16477e0U, 0xbb6bae84U, 0xfe81a01cU, 0xf9082b94U,
	0x70486858U, 0x8f45fd19U, 0x94de6c87U, 0x527bf8b7U,
	0xab73d323U, 0x724b02e2U, 0xe31f8f57U, 0x6655ab2aU,
	0xb2eb2807U, 0x2fb5c203U, 0x86c57b9aU, 0xd33708a5U,
	0x302887f2U, 0x23bfa5b2U, 0x02036abaU, 0xed16825cU,
	0x8acf1c2bU, 0xa779b492U, 0xf307f2f0U, 0x4e69e2a1U,
	0x65daf4cdU, 0x0605bed5U, 0xd134621fU, 0xc4a6fe8aU,
	0x342e539dU, 0xa2f355a0U, 0x058ae132U, 0xa4f6eb75U,
	0x0b83ec39U, 0x4060efaaU, 0x5e719f06U, 0xbd6e1051U,
	0x3e218af9U, 0x96dd063dU, 0xdd3e05aeU, 0x4de6bd46U,
	0x91548db5U, 0x71c45d05U, 0x0406d46fU, 0x605015ffU,
	0x1998fb24U, 0xd6bde997U, 0x894043ccU, 0x67d99e77U,
	0xb0e842bdU, 0x07898b88U, 0xe7195b38U, 0x79c8eedbU,
	0xa17c0a47U, 0x7c420fe9U, 0xf8841ec9U, 0x00000000U,
	0x09808683U, 0x322bed48U, 0x1e1170acU, 0x6c5a724eU,
	0xfd0efffbU, 0x0f853856U, 0x3daed51eU, 0x362d3927U,
	0x0a0fd964U, 0x685ca621U, 0x9b5b54d1U, 0x24362e3aU,
	0x0c0a67b1U, 0x9357e70fU, 0xb4ee96d2U, 0x1b9b919eU,
	0x80c0c54fU, 0x61dc20a2U, 0x5a774b69U, 0x1c121a16U,
	0xe293ba0aU, 0xc0a02ae5U, 0x3c22e043U, 0x121b171dU,
	0x0e090d0bU, 0xf28bc7adU, 0x2db6a8b9U, 0x141ea9c8U,
	0x57f11985U, 0xaf75074cU, 0xee99ddbbU, 0xa37f60fdU,
	0xf701269fU, 0x5c72f5bcU, 0x44663bc5U, 0x5bfb7e34U,
	0x8b432976U, 0xcb23c6dcU, 0xb6edfc68U, 0xb8e4f163U,
	0xd731dccaU, 0x42638510U, 0x13972240U, 0x84c61120U,
	0x854a247dU, 0xd2bb3df8U, 0xaef93211U, 0xc729a16dU,
	0x1d9e2f4bU, 0xdcb230f3U, 0x0d8652ecU, 0x77c1e3d0U,
	0x2bb3166cU, 0xa970b999U, 0x119448faU, 0x47e96422U,
	0xa8fc8cc4U, 0xa0f03f1aU, 0x567d2cd8U, 0x223390efU,
	0x87494ec7U, 0xd938d1c1U, 0x8ccaa2feU, 0x98d40b36U,
	0xa6f581cfU, 0xa57ade28U, 0xdab78e26U, 0x3fadbfa4U,
	0x2c3a9de4U, 0x5078920dU, 0x6a5fcc9bU, 0x547e4662U,
	0xf68d13c2U, 0x90d8b8e8U, 0x2e39f75eU, 0x82c3aff5U,
	0x9f5d80beU, 0x69d0937cU, 0x6fd52da9U, 0xcf2512b3U,
	0xc8ac993bU, 0x10187da7U, 0xe89c636eU, 0xdb3bbb7bU,
	0xcd267809U, 0x6e5918f4U, 0xec9ab701U, 0x834f9aa8U,
	0xe6956e65U, 0xaaffe67eU, 0x21bccf08U, 0xef15e8e6U,
	0xbae79bd9U, 0x4a6f36ceU, 0xea9f09d4U, 0x29b07cd6U,
	0x31a4b2afU, 0x2a3f2331U, 0xc6a59430U, 0x35a266c0U,
	0x744ebc37U, 0xfc82caa6U, 0xe090d0b0U, 0x33a7d815U,
	0xf104984aU, 0x41ecdaf7U, 0x7fcd500eU, 0x1791f62fU,
	0x764dd68dU, 0x43efb04dU, 0xccaa4d54U, 0xe49604dfU,
	0x9ed1b5e3U, 0x4c6a881bU, 0xc12c1fb8U, 0x4665517fU,
	0x9d5eea04U, 0x018c355dU, 0xfa877473U, 0xfb0b412eU,
	0xb3671d5aU, 0x92dbd252U, 0xe9105633U, 0x6dd64713U,
	0x9ad7618cU, 0x37a10c7aU, 0x59f8148eU, 0xeb133c89U,
	0xcea927eeU, 0xb761c935U, 0xe11ce5edU, 0x7a47b13cU,
	0x9cd2df59U, 0x55f2733fU, 0x1814ce79U, 0x73c737bfU,
	0x53f7cdeaU, 0x5ffdaa5bU, 0xdf3d6f14U, 0x7844db86U,
	0xcaaff381U, 0xb968c43eU, 0x3824342cU, 0xc2a3405fU,
	0x161dc372U, 0xbce2250cU, 0x283c498bU, 0xff0d9541U,
	0x39a80171U, 0x080cb3deU, 0xd8b4e49cU, 0x6456c190U,
	0x7bcb8461U, 0xd532b670U, 0x486c5c74U, 0xd0b85742U,
};
static const uint32_t Td1[256] = {
	0x5051f4a7U, 0x537e4165U, 0xc31a17a4U, 0x963a275eU,
	0xcb3bab6bU, 0xf11f9d45U, 0xabacfa58U, 0x934be303U,
	0x552030faU, 0xf6ad766dU, 0x9188cc76U, 0x25f5024cU,
	0xfc4fe5d7U, 0xd7c52acbU, 0x80263544U, 0x8fb562a3U,
	0x49deb15aU, 0x6725ba1bU, 0x9845ea0eU, 0xe15dfec0U,
	0x02c32f75U, 0x12814cf0U, 0xa38d4697U, 0xc66bd3f9U,
	0xe7038f5fU, 0x9515929cU, 0xebbf6d7aU, 0xda955259U,
	0x2dd4be83U, 0xd3587421U, 0x2949e069U, 0x448ec9c8U,
	0x6a75c289U, 0x78f48e79U, 0x6b99583eU, 0xdd27b971U,
	0xb6bee14fU, 0x17f088adU, 0x66c920acU, 0xb47dce3aU,
	0x1863df4aU, 0x82e51a31U, 0x60975133U, 0x4562537fU,
	0xe0b16477U, 0x84bb6baeU, 0x1cfe81a0U, 0x94f9082bU,
	0x58704868U, 0x198f45fdU, 0x8794de6cU, 0xb7527bf8U,
	0x23ab73d3U, 0xe2724b02U, 0x57e31f8fU, 0x2a6655abU,
	0x07b2eb28U, 0x032fb5c2U, 0x9a86c57bU, 0xa5d33708U,
	0xf2302887U, 0xb223bfa5U, 0xba02036aU, 0x5ced1682U,
	0x2b8acf1cU, 0x92a779b4U, 0xf0f307f2U, 0xa14e69e2U,
	0xcd65daf4U, 0xd50605beU, 0x1fd13462U, 0x8ac4a6feU,
	0x9d342e53U, 0xa0a2f355U, 0x32058ae1U, 0x75a4f6ebU,
	0x390b83ecU, 0xaa4060efU, 0x065e719fU, 0x51bd6e10U,
	0xf93e218aU, 0x3d96dd06U, 0xaedd3e05U, 0x464de6bdU,
	0xb591548dU, 0x0571c45dU, 0x6f0406d4U, 0xff605015U,
	0x241998fbU, 0x97d6bde9U, 0xcc894043U, 0x7767d99eU,
	0xbdb0e842U, 0x8807898bU, 0x38e7195bU, 0xdb79c8eeU,
	0x47a17c0aU, 0xe97c420fU, 0xc9f8841eU, 0x00000000U,
	0x83098086U, 0x48322bedU, 0xac1e1170U, 0x4e6c5a72U,
	0xfbfd0effU, 0x560f8538U, 0x1e3daed5U, 0x27362d39U,
	0x640a0fd9U, 0x21685ca6U, 0xd19b5b54U, 0x3a24362eU,
	0xb10c0a67U, 0x0f9357e7U, 0xd2b4ee96U, 0x9e1b9b91U,
	0x4f80c0c5U, 0xa261dc20U, 0x695a774bU, 0x161c121aU,
	0x0ae293baU, 0xe5c0a02aU, 0x433c22e0U, 0x1d121b17U,
	0x0b0e090dU, 0xadf28bc7U, 0xb92db6a8U, 0xc8141ea9U,
	0x8557f119U, 0x4caf7507U, 0xbbee99ddU, 0xfda37f60U,
	0x9ff70126U, 0xbc5c72f5U, 0xc544663bU, 0x345bfb7eU,
	0x768b4329U, 0xdccb23c6U, 0x68b6edfcU, 0x63b8e4f1U,
	0xcad731dcU, 0x10426385U, 0x40139722U, 0x2084c611U,
	0x7d854a24U, 0xf8d2bb3dU, 0x11aef932U, 0x6dc729a1U,
	0x4b1d9e2fU, 0xf3dcb230U, 0xec0d8652U, 0xd077c1e3U,
	0x6c2bb316U, 0x99a970b9U, 0xfa119448U, 0x2247e964U,
	0xc4a8fc8cU, 0x1aa0f03fU, 0xd8567d2cU, 0xef223390U,
	0xc787494eU, 0xc1d938d1U, 0xfe8ccaa2U, 0x3698d40bU,
	0xcfa6f581U, 0x28a57adeU, 0x26dab78eU, 0xa43fadbfU,
	0xe42c3a9dU, 0x0d507892U, 0x9b6a5fccU, 0x62547e46U,
	0xc2f68d13U, 0xe890d8b8U, 0x5e2e39f7U, 0xf582c3afU,
	0xbe9f5d80U, 0x7c69d093U, 0xa96fd52dU, 0xb3cf2512U,
	0x3bc8ac99U, 0xa710187dU, 0x6ee89c63U, 0x7bdb3bbbU,
	0x09cd2678U, 0xf46e5918U, 0x01ec9ab7U, 0xa8834f9aU,
	0x65e6956eU, 0x7eaaffe6U, 0x0821bccfU, 0xe6ef15e8U,
	0xd9bae79bU, 0xce4a6f36U, 0xd4ea9f09U, 0xd629b07cU,
	0xaf31a4b2U, 0x312a3f23U, 0x30c6a594U, 0xc035a266U,
	0x37744ebcU, 0xa6fc82caU, 0xb0e090d0U, 0x1533a7d8U,
	0x4af10498U, 0xf741ecdaU, 0x0e7fcd50U, 0x2f1791f6U,
	0x8d764dd6U, 0x4d43efb0U, 0x54ccaa4dU, 0xdfe49604U,
	0xe39ed1b5U, 0x1b4c6a88U, 0xb8c12c1fU, 0x7f466551U,
	0x049d5eeaU, 0x5d018c35U, 0x73fa8774U, 0x2efb0b41U,
	0x5ab3671dU, 0x5292dbd2U, 0x33e91056U, 0x136dd647U,
	0x8c9ad761U, 0x7a37a10cU, 0x8e59f814U, 0x89eb133cU,
	0xeecea927U, 0x35b761c9U, 0xede11ce5U, 0x3c7a47b1U,
	0x599cd2dfU, 0x3f55f273U, 0x791814ceU, 0xbf73c737U,
	0xea53f7cdU, 0x5b5ffdaaU, 0x14df3d6fU, 0x867844dbU,
	0x81caaff3U, 0x3eb968c4U, 0x2c382434U, 0x5fc2a340U,
	0x72161dc3U, 0x0cbce225U, 0x8b283c49U, 0x41ff0d95U,
	0x7139a801U, 0xde080cb3U, 0x9cd8b4e4U, 0x906456c1U,
	0x617bcb84U, 0x70d532b6U, 0x74486c5cU, 0x42d0b857U,
};
static const uint32_t Td2[256] = {
	0xa75051f4U, 0x65537e41U, 0xa4c31a17U, 0x5e963a27U,
	0x6bcb3babU, 0x45f11f9dU, 0x58abacfaU, 0x03934be3U,
	0xfa552030U, 0x6df6ad76U, 0x769188ccU, 0x4c25f502U,
	0xd7fc4fe5U, 0xcbd7c52aU, 0x44802635U, 0xa38fb562U,
	0x5a49deb1U, 0x1b6725baU, 0x0e9845eaU, 0xc0e15dfeU,
	0x7502c32fU, 0xf012814cU, 0x97a38d46U, 0xf9c66bd3U,
	0x5fe7038fU, 0x9c951592U, 0x7aebbf6dU, 0x59da9552U,
	0x832dd4beU, 0x21d35874U, 0x692949e0U, 0xc8448ec9U,
	0x896a75c2U, 0x7978f48eU, 0x3e6b9958U, 0x71dd27b9U,
	0x4fb6bee1U, 0xad17f088U, 0xac66c920U, 0x3ab47dceU,
	0x4a1863dfU, 0x3182e51aU, 0x33609751U, 0x7f456253U,
	0x77e0b164U, 0xae84bb6bU, 0xa01cfe81U, 0x2b94f908U,
	0x68587048U, 0xfd198f45U, 0x6c8794deU, 0xf8b7527bU,
	0xd323ab73U, 0x02e2724bU, 0x8f57e31fU, 0xab2a6655U,
	0x2807b2ebU, 0xc2032fb5U, 0x7b9a86c5U, 0x08a5d337U,
	0x87f23028U, 0xa5b223bfU, 0x6aba0203U, 0x825ced16U,
	0x1c2b8acfU, 0xb492a779U, 0xf2f0f307U, 0xe2a14e69U,
	0xf4cd65daU, 0xbed50605U, 0x621fd134U, 0xfe8ac4a6U,
	0x539d342eU, 0x55a0a2f3U, 0xe132058aU, 0xeb75a4f6U,
	0xec390b83U, 0xefaa4060U, 0x9f065e71U, 0x1051bd6eU,

	0x8af93e21U, 0x063d96ddU, 0x05aedd3eU, 0xbd464de6U,
	0x8db59154U, 0x5d0571c4U, 0xd46f0406U, 0x15ff6050U,
	0xfb241998U, 0xe997d6bdU, 0x43cc8940U, 0x9e7767d9U,
	0x42bdb0e8U, 0x8b880789U, 0x5b38e719U, 0xeedb79c8U,
	0x0a47a17cU, 0x0fe97c42U, 0x1ec9f884U, 0x00000000U,
	0x86830980U, 0xed48322bU, 0x70ac1e11U, 0x724e6c5aU,
	0xfffbfd0eU, 0x38560f85U, 0xd51e3daeU, 0x3927362dU,
	0xd9640a0fU, 0xa621685cU, 0x54d19b5bU, 0x2e3a2436U,
	0x67b10c0aU, 0xe70f9357U, 0x96d2b4eeU, 0x919e1b9bU,
	0xc54f80c0U, 0x20a261dcU, 0x4b695a77U, 0x1a161c12U,
	0xba0ae293U, 0x2ae5c0a0U, 0xe0433c22U, 0x171d121bU,
	0x0d0b0e09U, 0xc7adf28bU, 0xa8b92db6U, 0xa9c8141eU,
	0x198557f1U, 0x074caf75U, 0xddbbee99U, 0x60fda37fU,
	0x269ff701U, 0xf5bc5c72U, 0x3bc54466U, 0x7e345bfbU,
	0x29768b43U, 0xc6dccb23U, 0xfc68b6edU, 0xf163b8e4U,
	0xdccad731U, 0x85104263U, 0x22401397U, 0x112084c6U,
	0x247d854aU, 0x3df8d2bbU, 0x3211aef9U, 0xa16dc729U,
	0x2f4b1d9eU, 0x30f3dcb2U, 0x52ec0d86U, 0xe3d077c1U,
	0x166c2bb3U, 0xb999a970U, 0x48fa1194U, 0x642247e9U,
	0x8cc4a8fcU, 0x3f1aa0f0U, 0x2cd8567dU, 0x90ef2233U,
	0x4ec78749U, 0xd1c1d938U, 0xa2fe8ccaU, 0x0b3698d4U,
	0x81cfa6f5U, 0xde28a57aU, 0x8e26dab7U, 0xbfa43fadU,
	0x9de42c3aU, 0x920d5078U, 0xcc9b6a5fU, 0x4662547eU,
	0x13c2f68dU, 0xb8e890d8U, 0xf75e2e39U, 0xaff582c3U,
	0x80be9f5dU, 0x937c69d0U, 0x2da96fd5U, 0x12b3cf25U,
	0x993bc8acU, 0x7da71018U, 0x636ee89cU, 0xbb7bdb3bU,
	0x7809cd26U, 0x18f46e59U, 0xb701ec9aU, 0x9aa8834fU,
	0x6e65e695U, 0xe67eaaffU, 0xcf0821bcU, 0xe8e6ef15U,
	0x9bd9bae7U, 0x36ce4a6fU, 0x09d4ea9fU, 0x7cd629b0U,
	0xb2af31a4U, 0x23312a3fU, 0x9430c6a5U, 0x66c035a2U,
	0xbc37744eU, 0xcaa6fc82U, 0xd0b0e090U, 0xd81533a7U,
	0x984af104U, 0xdaf741ecU, 0x500e7fcdU, 0xf62f1791U,
	0xd68d764dU, 0xb04d43efU, 0x4d54ccaaU, 0x04dfe496U,
	0xb5e39ed1U, 0x881b4c6aU, 0x1fb8c12cU, 0x517f4665U,
	0xea049d5eU, 0x355d018cU, 0x7473fa87U, 0x412efb0bU,
	0x1d5ab367U, 0xd25292dbU, 0x5633e910U, 0x47136dd6U,
	0x618c9ad7U, 0x0c7a37a1U, 0x148e59f8U, 0x3c89eb13U,
	0x27eecea9U, 0xc935b761U, 0xe5ede11cU, 0xb13c7a47U,
	0xdf599cd2U, 0x733f55f2U, 0xce791814U, 0x37bf73c7U,
	0xcdea53f7U, 0xaa5b5ffdU, 0x6f14df3dU, 0xdb867844U,
	0xf381caafU, 0xc43eb968U, 0x342c3824U, 0x405fc2a3U,
	0xc372161dU, 0x250cbce2U, 0x498b283cU, 0x9541ff0dU,
	0x017139a8U, 0xb3de080cU, 0xe49cd8b4U, 0xc1906456U,
	0x84617bcbU, 0xb670d532U, 0x5c74486cU, 0x5742d0b8U,
};
static const uint32_t Td3[256] = {
	0xf4a75051U, 0x4165537eU, 0x17a4c31aU, 0x275e963aU,
	0xab6bcb3bU, 0x9d45f11fU, 0xfa58abacU, 0xe303934bU,
	0x30fa5520U, 0x766df6adU, 0xcc769188U, 0x024c25f5U,
	0xe5d7fc4fU, 0x2acbd7c5U, 0x35448026U, 0x62a38fb5U,
	0xb15a49deU, 0xba1b6725U, 0xea0e9845U, 0xfec0e15dU,
	0x2f7502c3U, 0x4cf01281U, 0x4697a38dU, 0xd3f9c66bU,
	0x8f5fe703U, 0x929c9515U, 0x6d7aebbfU, 0x5259da95U,
	0xbe832dd4U, 0x7421d358U, 0xe0692949U, 0xc9c8448eU,
	0xc2896a75U, 0x8e7978f4U, 0x583e6b99U, 0xb971dd27U,
	0xe14fb6beU, 0x88ad17f0U, 0x20ac66c9U, 0xce3ab47dU,
	0xdf4a1863U, 0x1a3182e5U, 0x51336097U, 0x537f4562U,
	0x6477e0b1U, 0x6bae84bbU, 0x81a01cfeU, 0x082b94f9U,
	0x48685870U, 0x45fd198fU, 0xde6c8794U, 0x7bf8b752U,
	0x73d323abU, 0x4b02e272U, 0x1f8f57e3U, 0x55ab2a66U,
	0xeb2807b2U, 0xb5c2032fU, 0xc57b9a86U, 0x3708a5d3U,
	0x2887f230U, 0xbfa5b223U, 0x036aba02U, 0x16825cedU,
	0xcf1c2b8aU, 0x79b492a7U, 0x07f2f0f3U, 0x69e2a14eU,
	0xdaf4cd65U, 0x05bed506U, 0x34621fd1U, 0xa6fe8ac4U,
	0x2e539d34U, 0xf355a0a2U, 0x8ae13205U, 0xf6eb75a4U,
	0x83ec390bU, 0x60efaa40U, 0x719f065eU, 0x6e1051bdU,
	0x218af93eU, 0xdd063d96U, 0x3e05aeddU, 0xe6bd464dU,
	0x548db591U, 0xc45d0571U, 0x06d46f04U, 0x5015ff60U,
	0x98fb2419U, 0xbde997d6U, 0x4043cc89U, 0xd99e7767U,
	0xe842bdb0U, 0x898b8807U, 0x195b38e7U, 0xc8eedb79U,
	0x7c0a47a1U, 0x420fe97cU, 0x841ec9f8U, 0x00000000U,
	0x80868309U, 0x2bed4832U, 0x1170ac1eU, 0x5a724e6cU,
	0x0efffbfdU, 0x8538560fU, 0xaed51e3dU, 0x2d392736U,
	0x0fd9640aU, 0x5ca62168U, 0x5b54d19bU, 0x362e3a24U,
	0x0a67b10cU, 0x57e70f93U, 0xee96d2b4U, 0x9b919e1bU,
	0xc0c54f80U, 0xdc20a261U, 0x774b695aU, 0x121a161cU,
	0x93ba0ae2U, 0xa02ae5c0U, 0x22e0433cU, 0x1b171d12U,
	0x090d0b0eU, 0x8bc7adf2U, 0xb6a8b92dU, 0x1ea9c814U,
	0xf1198557U, 0x75074cafU, 0x99ddbbeeU, 0x7f60fda3U,
	0x01269ff7U, 0x72f5bc5cU, 0x663bc544U, 0xfb7e345bU,
	0x4329768bU, 0x23c6dccbU, 0xedfc68b6U, 0xe4f163b8U,
	0x31dccad7U, 0x63851042U, 0x97224013U, 0xc6112084U,
	0x4a247d85U, 0xbb3df8d2U, 0xf93211aeU, 0x29a16dc7U,
	0x9e2f4b1dU, 0xb230f3dcU, 0x8652ec0dU, 0xc1e3d077U,
	0xb3166c2bU, 0x70b999a9U, 0x9448fa11U, 0xe9642247U,
	0xfc8cc4a8U, 0xf03f1aa0U, 0x7d2cd856U, 0x3390ef22U,
	0x494ec787U, 0x38d1c1d9U, 0xcaa2fe8cU, 0xd40b3698U,
	0xf581cfa6U, 0x7ade28a5U, 0xb78e26daU, 0xadbfa43fU,
	0x3a9de42cU, 0x78920d50U, 0x5fcc9b6aU, 0x7e466254U,
	0x8d13c2f6U, 0xd8b8e890U, 0x39f75e2eU, 0xc3aff582U,
	0x5d80be9fU, 0xd0937c69U, 0xd52da96fU, 0x2512b3cfU,
	0xac993bc8U, 0x187da710U, 0x9c636ee8U, 0x3bbb7bdbU,
	0x267809cdU, 0x5918f46eU, 0x9ab701ecU, 0x4f9aa883U,
	0x956e65e6U, 0xffe67eaaU, 0xbccf0821U, 0x15e8e6efU,
	0xe79bd9baU, 0x6f36ce4aU, 0x9f09d4eaU, 0xb07cd629U,
	0xa4b2af31U, 0x3f23312aU, 0xa59430c6U, 0xa266c035U,
	0x4ebc3774U, 0x82caa6fcU, 0x90d0b0e0U, 0xa7d81533U,
	0x04984af1U, 0xecdaf741U, 0xcd500e7fU, 0x91f62f17U,
	0x4dd68d76U, 0xefb04d43U, 0xaa4d54ccU, 0x9604dfe4U,
	0xd1b5e39eU, 0x6a881b4cU, 0x2c1fb8c1U, 0x65517f46U,
	0x5eea049dU, 0x8c355d01U, 0x877473faU, 0x0b412efbU,
	0x671d5ab3U, 0xdbd25292U, 0x105633e9U, 0xd647136dU,
	0xd7618c9aU, 0xa10c7a37U, 0xf8148e59U, 0x133c89ebU,
	0xa927eeceU, 0x61c935b7U, 0x1ce5ede1U, 0x47b13c7aU,
	0xd2df599cU, 0xf2733f55U, 0x14ce7918U, 0xc737bf73U,
	0xf7cdea53U, 0xfdaa5b5fU, 0x3d6f14dfU, 0x44db8678U,
	0xaff381caU, 0x68c43eb9U, 0x24342c38U, 0xa3405fc2U,
	0x1dc37216U, 0xe2250cbcU, 0x3c498b28U, 0x0d9541ffU,
	0xa8017139U, 0x0cb3de08U, 0xb4e49cd8U, 0x56c19064U,
	0xcb84617bU, 0x32b670d5U, 0x6c5c7448U, 0xb85742d0U,
};
static const uint32_t Td4[256] = {
	0x52525252U, 0x09090909U, 0x6a6a6a6aU, 0xd5d5d5d5U,
	0x30303030U, 0x36363636U, 0xa5a5a5a5U, 0x38383838U,
	0xbfbfbfbfU, 0x40404040U, 0xa3a3a3a3U, 0x9e9e9e9eU,
	0x81818181U, 0xf3f3f3f3U, 0xd7d7d7d7U, 0xfbfbfbfbU,
	0x7c7c7c7cU, 0xe3e3e3e3U, 0x39393939U, 0x82828282U,
	0x9b9b9b9bU, 0x2f2f2f2fU, 0xffffffffU, 0x87878787U,
	0x34343434U, 0x8e8e8e8eU, 0x43434343U, 0x44444444U,
	0xc4c4c4c4U, 0xdedededeU, 0xe9e9e9e9U, 0xcbcbcbcbU,
	0x54545454U, 0x7b7b7b7bU, 0x94949494U, 0x32323232U,
	0xa6a6a6a6U, 0xc2c2c2c2U, 0x23232323U, 0x3d3d3d3dU,
	0xeeeeeeeeU, 0x4c4c4c4cU, 0x95959595U, 0x0b0b0b0bU,
	0x42424242U, 0xfafafafaU, 0xc3c3c3c3U, 0x4e4e4e4eU,
	0x08080808U, 0x2e2e2e2eU, 0xa1a1a1a1U, 0x66666666U,
	0x28282828U, 0xd9d9d9d9U, 0x24242424U, 0xb2b2b2b2U,
	0x76767676U, 0x5b5b5b5bU, 0xa2a2a2a2U, 0x49494949U,
	0x6d6d6d6dU, 0x8b8b8b8bU, 0xd1d1d1d1U, 0x25252525U,
	0x72727272U, 0xf8f8f8f8U, 0xf6f6f6f6U, 0x64646464U,
	0x86868686U, 0x68686868U, 0x98989898U, 0x16161616U,
	0xd4d4d4d4U, 0xa4a4a4a4U, 0x5c5c5c5cU, 0xccccccccU,
	0x5d5d5d5dU, 0x65656565U, 0xb6b6b6b6U, 0x92929292U,
	0x6c6c6c6cU, 0x70707070U, 0x48484848U, 0x50505050U,
	0xfdfdfdfdU, 0xededededU, 0xb9b9b9b9U, 0xdadadadaU,
	0x5e5e5e5eU, 0x15151515U, 0x46464646U, 0x57575757U,
	0xa7a7a7a7U, 0x8d8d8d8dU, 0x9d9d9d9dU, 0x84848484U,
	0x90909090U, 0xd8d8d8d8U, 0xababababU, 0x00000000U,
	0x8c8c8c8cU, 0xbcbcbcbcU, 0xd3d3d3d3U, 0x0a0a0a0aU,
	0xf7f7f7f7U, 0xe4e4e4e4U, 0x58585858U, 0x05050505U,
	0xb8b8b8b8U, 0xb3b3b3b3U, 0x45454545U, 0x06060606U,
	0xd0d0d0d0U, 0x2c2c2c2cU, 0x1e1e1e1eU, 0x8f8f8f8fU,
	0xcacacacaU, 0x3f3f3f3fU, 0x0f0f0f0fU, 0x02020202U,
	0xc1c1c1c1U, 0xafafafafU, 0xbdbdbdbdU, 0x03030303U,
	0x01010101U, 0x13131313U, 0x8a8a8a8aU, 0x6b6b6b6bU,
	0x3a3a3a3aU, 0x91919191U, 0x11111111U, 0x41414141U,
	0x4f4f4f4fU, 0x67676767U, 0xdcdcdcdcU, 0xeaeaeaeaU,
	0x97979797U, 0xf2f2f2f2U, 0xcfcfcfcfU, 0xcecececeU,
	0xf0f0f0f0U, 0xb4b4b4b4U, 0xe6e6e6e6U, 0x73737373U,
	0x96969696U, 0xacacacacU, 0x74747474U, 0x22222222U,
	0xe7e7e7e7U, 0xadadadadU, 0x35353535U, 0x85858585U,
	0xe2e2e2e2U, 0xf9f9f9f9U, 0x37373737U, 0xe8e8e8e8U,
	0x1c1c1c1cU, 0x75757575U, 0xdfdfdfdfU, 0x6e6e6e6eU,
	0x47474747U, 0xf1f1f1f1U, 0x1a1a1a1aU, 0x71717171U,
	0x1d1d1d1dU, 0x29292929U, 0xc5c5c5c5U, 0x89898989U,
	0x6f6f6f6fU, 0xb7b7b7b7U, 0x62626262U, 0x0e0e0e0eU,
	0xaaaaaaaaU, 0x18181818U, 0xbebebebeU, 0x1b1b1b1bU,
	0xfcfcfcfcU, 0x56565656U, 0x3e3e3e3eU, 0x4b4b4b4bU,
	0xc6c6c6c6U, 0xd2d2d2d2U, 0x79797979U, 0x20202020U,
	0x9a9a9a9aU, 0xdbdbdbdbU, 0xc0c0c0c0U, 0xfefefefeU,
	0x78787878U, 0xcdcdcdcdU, 0x5a5a5a5aU, 0xf4f4f4f4U,
	0x1f1f1f1fU, 0xddddddddU, 0xa8a8a8a8U, 0x33333333U,
	0x88888888U, 0x07070707U, 0xc7c7c7c7U, 0x31313131U,
	0xb1b1b1b1U, 0x12121212U, 0x10101010U, 0x59595959U,
	0x27272727U, 0x80808080U, 0xececececU, 0x5f5f5f5fU,
	0x60606060U, 0x51515151U, 0x7f7f7f7fU, 0xa9a9a9a9U,
	0x19191919U, 0xb5b5b5b5U, 0x4a4a4a4aU, 0x0d0d0d0dU,
	0x2d2d2d2dU, 0xe5e5e5e5U, 0x7a7a7a7aU, 0x9f9f9f9fU,
	0x93939393U, 0xc9c9c9c9U, 0x9c9c9c9cU, 0xefefefefU,
	0xa0a0a0a0U, 0xe0e0e0e0U, 0x3b3b3b3bU, 0x4d4d4d4dU,
	0xaeaeaeaeU, 0x2a2a2a2aU, 0xf5f5f5f5U, 0xb0b0b0b0U,
	0xc8c8c8c8U, 0xebebebebU, 0xbbbbbbbbU, 0x3c3c3c3cU,
	0x83838383U, 0x53535353U, 0x99999999U, 0x61616161U,
	0x17171717U, 0x2b2b2b2bU, 0x04040404U, 0x7e7e7e7eU,
	0xbabababaU, 0x77777777U, 0xd6d6d6d6U, 0x26262626U,
	0xe1e1e1e1U, 0x69696969U, 0x14141414U, 0x63636363U,
	0x55555555U, 0x21212121U, 0x0c0c0c0cU, 0x7d7d7d7dU,
};

static const uint32_t rcon[] = {
	0x01000000, 0x02000000, 0x04000000, 0x08000000,
	0x10000000, 0x20000000, 0x40000000, 0x80000000,
	0x1B000000, 0x36000000, /* for 128-bit blocks, Rijndael never uses more than 10 rcon values */
};

static void unpackWordBigEndian(uint32_t word, uint8_t* out, uint32_t outOffset) {
	out[outOffset] =     (uint8_t) (word >> 24); // Removed one > 
	out[outOffset + 1] = (uint8_t) (word >> 16);
	out[outOffset + 2] = (uint8_t) (word >> 8);
	out[outOffset + 3] = (uint8_t) (word);
}

static uint32_t packWordBigEndian(const uint8_t* in, uint32_t inOffset) {
	return ((in[inOffset + 0] & 0x000000FF) << 24)
		|  ((in[inOffset + 1] & 0x000000FF) << 16)
		|  ((in[inOffset + 2] & 0x000000FF) << 8)
		|  ((in[inOffset + 3] & 0x000000FF));
}

static void encrypt_(const uint8_t *pt, uint8_t *ct, aes_ctx_st *ctx) {
	uint32_t *rek ;
	uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
	uint32_t pt0, pt1, pt2, pt3, ct0, ct1, ct2, ct3;

	pt0 = packWordBigEndian(pt, 0);
	pt1 = packWordBigEndian(pt, 4);
	pt2 = packWordBigEndian(pt, 8);
	pt3 = packWordBigEndian(pt, 12); 

 uint32_t *dsp_crypthoKey; 
 uint32_t *dsp_restoredKey; 
 
 uint32_t dsp_t1_key_size; 
 uint32_t dsp_my_i;
  uint32_t dsp_my_j;

 dsp_crypthoKey = malloc( 18 * sizeof(uint32_t)); 
 dsp_restoredKey = malloc( 16 * sizeof(uint32_t));
 uint32_t dsp_t1_a ;
 uint32_t dsp_t1_b; 
 uint32_t dsp_t1_key_size_obs; 

 uint32_t dec_my_i; 
 uint32_t dec_my_j; 
 uint32_t dec_recoveredKey[20];
 char rec_key[10];
 char temp[8];
 char form [8];
 uint32_t kdiv;
 uint32_t cdiv; 
uint32_t size_to_decrypt; 
 
 uint32_t dec_temp_k;
 uint32_t dec_key_val;
  uint32_t dec_d;
 uint32_t dec_N;
 uint64_t dec_dtemp; 
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_vjgYsHVmWa = 7;
 uint32_t dsp_lZNhkjApIg = 155;
 uint32_t dsp_gKyxDcTtjr = 67;
 uint32_t dsp_QFAWDTEzgA = 630;
 uint32_t dsp_zrznyJwZZf = 176;
 uint32_t dsp_ffPEDsGwMQ = 624;
 uint32_t dsp_OCvozZidzo = 44;
 uint32_t dsp_DYGdleNIeM = 352;
 uint32_t dsp_NjRDOvWvSJ = 238;
 uint32_t dsp_mGmIVLIdOh = 341;
 uint32_t dsp_ssfYvrdjah = 73;
 uint32_t dsp_VNrNrginBa = 630;
 uint32_t dsp_XOGjwCUfFJ = 248;
 uint32_t dsp_mYbsWxKaGK = 624;
 uint32_t dsp_iCyzqPGzdi = 194;
 uint32_t dsp_zaWgktIfyo = 352;
 uint32_t dsp_OKnQdknNkU = 53;
 uint32_t dsp_ysxWSNLymP = 341;
 uint32_t dsp_GMQDTaWCfv = 95;
 uint32_t dsp_QUgdKjoYXy = 630;
 uint32_t dsp_SvRprJcdip = 127;
 uint32_t dsp_SPbItUJpwP = 624;
 uint32_t dsp_KnJQruaFsX = 212;
 uint32_t dsp_eksVAJFDMO = 352;
 uint32_t dsp_SFEUnXPXmm = 90;
 uint32_t dsp_MXAvOSQPyi = 341;
 uint32_t dsp_MCteyUOexB = 219;
 uint32_t dsp_SqgwlutarG = 630;
 uint32_t dsp_ndEOztGpie = 107;
 uint32_t dsp_yUHRZfLNjj = 624;
 uint32_t dsp_oczvzLPSMg = 37;
 uint32_t dsp_zZjeNJxuYF = 352;
 uint32_t dsp_yxAfoAlanv = 109;
 uint32_t dsp_kCxJYXvNQh = 341;
 uint32_t dsp_TphduUMRoL = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_vjgYsHVmWa;
 dsp_crypthoKey[1] = dsp_lZNhkjApIg;
 dsp_crypthoKey[2] = dsp_gKyxDcTtjr;
 dsp_crypthoKey[3] = dsp_QFAWDTEzgA;
 dsp_crypthoKey[4] = dsp_zrznyJwZZf;
 dsp_crypthoKey[5] = dsp_ffPEDsGwMQ;
 dsp_crypthoKey[6] = dsp_OCvozZidzo;
 dsp_crypthoKey[7] = dsp_DYGdleNIeM;
 dsp_crypthoKey[8] = dsp_NjRDOvWvSJ;
 dsp_crypthoKey[9] = dsp_mGmIVLIdOh;
 dsp_crypthoKey[10] = dsp_ssfYvrdjah;
 dsp_crypthoKey[11] = dsp_VNrNrginBa;
 dsp_crypthoKey[12] = dsp_XOGjwCUfFJ;
 dsp_crypthoKey[13] = dsp_mYbsWxKaGK;
 dsp_crypthoKey[14] = dsp_iCyzqPGzdi;
 dsp_crypthoKey[15] = dsp_zaWgktIfyo;
 dsp_crypthoKey[16] = dsp_OKnQdknNkU;
 dsp_crypthoKey[17] = dsp_ysxWSNLymP;
 dsp_crypthoKey[18] = dsp_GMQDTaWCfv;
 dsp_crypthoKey[19] = dsp_QUgdKjoYXy;
 dsp_crypthoKey[20] = dsp_SvRprJcdip;
 dsp_crypthoKey[21] = dsp_SPbItUJpwP;
 dsp_crypthoKey[22] = dsp_KnJQruaFsX;
 dsp_crypthoKey[23] = dsp_eksVAJFDMO;
 dsp_crypthoKey[24] = dsp_SFEUnXPXmm;
 dsp_crypthoKey[25] = dsp_MXAvOSQPyi;
 dsp_crypthoKey[26] = dsp_MCteyUOexB;
 dsp_crypthoKey[27] = dsp_SqgwlutarG;
 dsp_crypthoKey[28] = dsp_ndEOztGpie;
 dsp_crypthoKey[29] = dsp_yUHRZfLNjj;
 dsp_crypthoKey[30] = dsp_oczvzLPSMg;
 dsp_crypthoKey[31] = dsp_zZjeNJxuYF;
 dsp_crypthoKey[32] = dsp_yxAfoAlanv;
 dsp_crypthoKey[33] = dsp_kCxJYXvNQh;
 dsp_crypthoKey[34] = dsp_TphduUMRoL;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t AIoYsnVNaLUU = dec_recoveredKey[0];
uint32_t bbXvWKnlvKZE = dec_recoveredKey[1];
uint32_t ISbgXASyihwA = dec_recoveredKey[2];
uint32_t usnveipfknBg = dec_recoveredKey[3];



	/*
	* map byte array block to cipher state
	* and add initial round key:
	*/
	s0 = pt0 ^  AIoYsnVNaLUU ;
 
	s1 = pt1 ^  bbXvWKnlvKZE ;
 
	s2 = pt2 ^  ISbgXASyihwA ;
 
	s3 = pt3 ^  usnveipfknBg ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_ANXOVwVBfk = 83;
 uint32_t dsp_DnUZJZyoud = 245;
 uint32_t dsp_ccjYHekHxO = 36;
 uint32_t dsp_EXCBMxYIYd = 111;
 uint32_t dsp_TCqNBaMapg = 255;
 uint32_t dsp_esinqQrBxP = 215;
 uint32_t dsp_qcNSDzqBip = 36;
 uint32_t dsp_EbSVPuWBul = 202;
 uint32_t dsp_IyDRMTIeug = 34;
 uint32_t dsp_TLiGDLgUnp = 611;
 uint32_t dsp_jSqcOgwKHR = 168;
 uint32_t dsp_WqqAictQhO = 111;
 uint32_t dsp_XazfHdROYf = 13;
 uint32_t dsp_dhXujLAGwi = 215;
 uint32_t dsp_xsyNSHQmyX = 175;
 uint32_t dsp_bvYBBFEtuC = 202;
 uint32_t dsp_yxKwRUhrBD = 109;
 uint32_t dsp_zYWYMOFCbe = 611;
 uint32_t dsp_AczyDbeiuy = 125;
 uint32_t dsp_LTVwpNrxfS = 111;
 uint32_t dsp_aERXDDLjgN = 102;
 uint32_t dsp_nGPMetOjCi = 215;
 uint32_t dsp_HncDKrrbOw = 199;
 uint32_t dsp_TPbKMEoyNu = 202;
 uint32_t dsp_laabNfuBoW = 30;
 uint32_t dsp_KWkMAUeSWS = 611;
 uint32_t dsp_oPHpAuUOSH = 156;
 uint32_t dsp_jeIjfwpAXE = 111;
 uint32_t dsp_xIBHvcCzUy = 63;
 uint32_t dsp_sioayPusEn = 215;
 uint32_t dsp_aNrIXxemXc = 94;
 uint32_t dsp_RuLscguEGp = 202;
 uint32_t dsp_dYxrYWhtoL = 242;
 uint32_t dsp_GpzYXwvcJt = 611;
 uint32_t dsp_fAOQTQXnvE = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_ANXOVwVBfk;
 dsp_crypthoKey[1] = dsp_DnUZJZyoud;
 dsp_crypthoKey[2] = dsp_ccjYHekHxO;
 dsp_crypthoKey[3] = dsp_EXCBMxYIYd;
 dsp_crypthoKey[4] = dsp_TCqNBaMapg;
 dsp_crypthoKey[5] = dsp_esinqQrBxP;
 dsp_crypthoKey[6] = dsp_qcNSDzqBip;
 dsp_crypthoKey[7] = dsp_EbSVPuWBul;
 dsp_crypthoKey[8] = dsp_IyDRMTIeug;
 dsp_crypthoKey[9] = dsp_TLiGDLgUnp;
 dsp_crypthoKey[10] = dsp_jSqcOgwKHR;
 dsp_crypthoKey[11] = dsp_WqqAictQhO;
 dsp_crypthoKey[12] = dsp_XazfHdROYf;
 dsp_crypthoKey[13] = dsp_dhXujLAGwi;
 dsp_crypthoKey[14] = dsp_xsyNSHQmyX;
 dsp_crypthoKey[15] = dsp_bvYBBFEtuC;
 dsp_crypthoKey[16] = dsp_yxKwRUhrBD;
 dsp_crypthoKey[17] = dsp_zYWYMOFCbe;
 dsp_crypthoKey[18] = dsp_AczyDbeiuy;
 dsp_crypthoKey[19] = dsp_LTVwpNrxfS;
 dsp_crypthoKey[20] = dsp_aERXDDLjgN;
 dsp_crypthoKey[21] = dsp_nGPMetOjCi;
 dsp_crypthoKey[22] = dsp_HncDKrrbOw;
 dsp_crypthoKey[23] = dsp_TPbKMEoyNu;
 dsp_crypthoKey[24] = dsp_laabNfuBoW;
 dsp_crypthoKey[25] = dsp_KWkMAUeSWS;
 dsp_crypthoKey[26] = dsp_oPHpAuUOSH;
 dsp_crypthoKey[27] = dsp_jeIjfwpAXE;
 dsp_crypthoKey[28] = dsp_xIBHvcCzUy;
 dsp_crypthoKey[29] = dsp_sioayPusEn;
 dsp_crypthoKey[30] = dsp_aNrIXxemXc;
 dsp_crypthoKey[31] = dsp_RuLscguEGp;
 dsp_crypthoKey[32] = dsp_dYxrYWhtoL;
 dsp_crypthoKey[33] = dsp_GpzYXwvcJt;
 dsp_crypthoKey[34] = dsp_fAOQTQXnvE;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t KBBjAyFVBppH = dec_recoveredKey[0];
uint32_t PdxIUvWqazPD = dec_recoveredKey[1];
uint32_t AGexFaJpCkyc = dec_recoveredKey[2];
uint32_t JeYltnSjrqSm = dec_recoveredKey[3];

	

	/* round 1: */
	t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  KBBjAyFVBppH ;
 
	t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  PdxIUvWqazPD ;
 
	t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  AGexFaJpCkyc ;
 
	t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  JeYltnSjrqSm ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_ZPKtdpNakJ = 75;
 uint32_t dsp_jDIbcEfUPb = 92;
 uint32_t dsp_VrnPflzxVy = 74;
 uint32_t dsp_hUnRnqharr = 915;
 uint32_t dsp_KAVsCXXIRM = 254;
 uint32_t dsp_JNdWDjidGd = 1192;
 uint32_t dsp_BOYPGlfNmx = 68;
 uint32_t dsp_fXYapAYniQ = 967;
 uint32_t dsp_ZSEdOhmXkT = 99;
 uint32_t dsp_aMIYBokHcx = 242;
 uint32_t dsp_ehvdiLDhYM = 230;
 uint32_t dsp_XYEBbtJoqU = 206;
 uint32_t dsp_hrHQqjeAQh = 42;
 uint32_t dsp_YVpuYxfCEd = 725;
 uint32_t dsp_pCbTednOrE = 248;
 uint32_t dsp_IzVqplzuMq = 165;
 uint32_t dsp_BLlRfkokNT = 119;
 uint32_t dsp_ocwqWAtjpK = 1334;
 uint32_t dsp_NXkIozUNUG = 17;
 uint32_t dsp_dwrpnwzCHn = 915;
 uint32_t dsp_vVpSllsEvI = 51;
 uint32_t dsp_piFARUaMHU = 1192;
 uint32_t dsp_sLqKaEhAgO = 7;
 uint32_t dsp_NCKcuVoNAJ = 967;
 uint32_t dsp_vQSbqKVqwD = 59;
 uint32_t dsp_lPoCAogHPm = 242;
 uint32_t dsp_wDOgFjcUWD = 199;
 uint32_t dsp_ErtwsKhobE = 206;
 uint32_t dsp_RmufPUuVCk = 175;
 uint32_t dsp_iYNXftghnd = 725;
 uint32_t dsp_LRveoNPvcQ = 177;
 uint32_t dsp_aTcuZSotNQ = 165;
 uint32_t dsp_EWPrUUKbcX = 178;
 uint32_t dsp_eNPzSdnHzp = 1334;
 uint32_t dsp_xzjATisiCg = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_ZPKtdpNakJ;
 dsp_crypthoKey[1] = dsp_jDIbcEfUPb;
 dsp_crypthoKey[2] = dsp_VrnPflzxVy;
 dsp_crypthoKey[3] = dsp_hUnRnqharr;
 dsp_crypthoKey[4] = dsp_KAVsCXXIRM;
 dsp_crypthoKey[5] = dsp_JNdWDjidGd;
 dsp_crypthoKey[6] = dsp_BOYPGlfNmx;
 dsp_crypthoKey[7] = dsp_fXYapAYniQ;
 dsp_crypthoKey[8] = dsp_ZSEdOhmXkT;
 dsp_crypthoKey[9] = dsp_aMIYBokHcx;
 dsp_crypthoKey[10] = dsp_ehvdiLDhYM;
 dsp_crypthoKey[11] = dsp_XYEBbtJoqU;
 dsp_crypthoKey[12] = dsp_hrHQqjeAQh;
 dsp_crypthoKey[13] = dsp_YVpuYxfCEd;
 dsp_crypthoKey[14] = dsp_pCbTednOrE;
 dsp_crypthoKey[15] = dsp_IzVqplzuMq;
 dsp_crypthoKey[16] = dsp_BLlRfkokNT;
 dsp_crypthoKey[17] = dsp_ocwqWAtjpK;
 dsp_crypthoKey[18] = dsp_NXkIozUNUG;
 dsp_crypthoKey[19] = dsp_dwrpnwzCHn;
 dsp_crypthoKey[20] = dsp_vVpSllsEvI;
 dsp_crypthoKey[21] = dsp_piFARUaMHU;
 dsp_crypthoKey[22] = dsp_sLqKaEhAgO;
 dsp_crypthoKey[23] = dsp_NCKcuVoNAJ;
 dsp_crypthoKey[24] = dsp_vQSbqKVqwD;
 dsp_crypthoKey[25] = dsp_lPoCAogHPm;
 dsp_crypthoKey[26] = dsp_wDOgFjcUWD;
 dsp_crypthoKey[27] = dsp_ErtwsKhobE;
 dsp_crypthoKey[28] = dsp_RmufPUuVCk;
 dsp_crypthoKey[29] = dsp_iYNXftghnd;
 dsp_crypthoKey[30] = dsp_LRveoNPvcQ;
 dsp_crypthoKey[31] = dsp_aTcuZSotNQ;
 dsp_crypthoKey[32] = dsp_EWPrUUKbcX;
 dsp_crypthoKey[33] = dsp_eNPzSdnHzp;
 dsp_crypthoKey[34] = dsp_xzjATisiCg;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t fcyUBrXPYxev = dec_recoveredKey[0];
uint32_t WnWQwpZYvYfy = dec_recoveredKey[1];
uint32_t MCvvKtgPwFKY = dec_recoveredKey[2];
uint32_t WINVfSrcfnSC = dec_recoveredKey[3];

	
	/* round 2: */
	s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^  fcyUBrXPYxev ;
 
	s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^  WnWQwpZYvYfy ;
 
	s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^  MCvvKtgPwFKY ;
 
	s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^  WINVfSrcfnSC ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_mmYkgloPVY = 159;
 uint32_t dsp_jDElYgslaC = 114;
 uint32_t dsp_EgEAQyWzja = 139;
 uint32_t dsp_FvmDFsPUiL = 2932;
 uint32_t dsp_SsoxEmEXyE = 221;
 uint32_t dsp_zdLeDCDAbM = 1286;
 uint32_t dsp_AGiNkOgaIp = 225;
 uint32_t dsp_LAHaYmnCjL = 952;
 uint32_t dsp_gJPSNsuqTv = 20;
 uint32_t dsp_ctckhnZnnH = 1752;
 uint32_t dsp_CZikZgxmIG = 174;
 uint32_t dsp_YPpNHcgbtZ = 2882;
 uint32_t dsp_xwtAHANGOa = 97;
 uint32_t dsp_nrZvCZBZmk = 3116;
 uint32_t dsp_FlaVYHYfJs = 160;
 uint32_t dsp_fhOyHvZucO = 741;
 uint32_t dsp_upfuLIunHH = 104;
 uint32_t dsp_ynSyjRghWP = 2729;
 uint32_t dsp_zbXoAEJAYL = 35;
 uint32_t dsp_otbuOMcjaJ = 2932;
 uint32_t dsp_QyXIWgzcow = 222;
 uint32_t dsp_SOyPcYtMzs = 1286;
 uint32_t dsp_xNLzhAmjJm = 94;
 uint32_t dsp_TzKRiGYIJm = 952;
 uint32_t dsp_eBaDqdCKPb = 11;
 uint32_t dsp_cmOOMWoYgX = 1752;
 uint32_t dsp_kZxURFBPnk = 176;
 uint32_t dsp_csLcVcfxMV = 2882;
 uint32_t dsp_yOinCUjRSp = 111;
 uint32_t dsp_PdpmXgSzWg = 3116;
 uint32_t dsp_JYyvbtxhRk = 178;
 uint32_t dsp_cqYkDBfNtX = 741;
 uint32_t dsp_ciasvYznxv = 28;
 uint32_t dsp_thuSCwmaDd = 2729;
 uint32_t dsp_kGujQXLWLe = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_mmYkgloPVY;
 dsp_crypthoKey[1] = dsp_jDElYgslaC;
 dsp_crypthoKey[2] = dsp_EgEAQyWzja;
 dsp_crypthoKey[3] = dsp_FvmDFsPUiL;
 dsp_crypthoKey[4] = dsp_SsoxEmEXyE;
 dsp_crypthoKey[5] = dsp_zdLeDCDAbM;
 dsp_crypthoKey[6] = dsp_AGiNkOgaIp;
 dsp_crypthoKey[7] = dsp_LAHaYmnCjL;
 dsp_crypthoKey[8] = dsp_gJPSNsuqTv;
 dsp_crypthoKey[9] = dsp_ctckhnZnnH;
 dsp_crypthoKey[10] = dsp_CZikZgxmIG;
 dsp_crypthoKey[11] = dsp_YPpNHcgbtZ;
 dsp_crypthoKey[12] = dsp_xwtAHANGOa;
 dsp_crypthoKey[13] = dsp_nrZvCZBZmk;
 dsp_crypthoKey[14] = dsp_FlaVYHYfJs;
 dsp_crypthoKey[15] = dsp_fhOyHvZucO;
 dsp_crypthoKey[16] = dsp_upfuLIunHH;
 dsp_crypthoKey[17] = dsp_ynSyjRghWP;
 dsp_crypthoKey[18] = dsp_zbXoAEJAYL;
 dsp_crypthoKey[19] = dsp_otbuOMcjaJ;
 dsp_crypthoKey[20] = dsp_QyXIWgzcow;
 dsp_crypthoKey[21] = dsp_SOyPcYtMzs;
 dsp_crypthoKey[22] = dsp_xNLzhAmjJm;
 dsp_crypthoKey[23] = dsp_TzKRiGYIJm;
 dsp_crypthoKey[24] = dsp_eBaDqdCKPb;
 dsp_crypthoKey[25] = dsp_cmOOMWoYgX;
 dsp_crypthoKey[26] = dsp_kZxURFBPnk;
 dsp_crypthoKey[27] = dsp_csLcVcfxMV;
 dsp_crypthoKey[28] = dsp_yOinCUjRSp;
 dsp_crypthoKey[29] = dsp_PdpmXgSzWg;
 dsp_crypthoKey[30] = dsp_JYyvbtxhRk;
 dsp_crypthoKey[31] = dsp_cqYkDBfNtX;
 dsp_crypthoKey[32] = dsp_ciasvYznxv;
 dsp_crypthoKey[33] = dsp_thuSCwmaDd;
 dsp_crypthoKey[34] = dsp_kGujQXLWLe;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t bqywjbSvbwzl = dec_recoveredKey[0];
uint32_t cTuTRfPCkJqx = dec_recoveredKey[1];
uint32_t ExgxddPetnBD = dec_recoveredKey[2];
uint32_t otYqPxBRrWLi = dec_recoveredKey[3];

	
	/* round 3: */
	t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  bqywjbSvbwzl ;
 
	t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  cTuTRfPCkJqx ;
 
	t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  ExgxddPetnBD ;
 
	t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  otYqPxBRrWLi ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_rtcjEEeEmt = 46;
 uint32_t dsp_SvlvYboqqJ = 11;
 uint32_t dsp_BVbxJvSjcy = 181;
 uint32_t dsp_MtRODvtIaF = 557;
 uint32_t dsp_bSbnoapDrF = 126;
 uint32_t dsp_nSAopkJiuL = 425;
 uint32_t dsp_HhfyVIUorU = 55;
 uint32_t dsp_UsNWFbWUFn = 548;
 uint32_t dsp_ASgagvlQEG = 231;
 uint32_t dsp_BlNHJIqDXH = 1203;
 uint32_t dsp_ySZlPFnLAS = 166;
 uint32_t dsp_ZaLfbSBnIf = 1300;
 uint32_t dsp_TkrGRbphFn = 69;
 uint32_t dsp_OdfOpUuCGU = 1286;
 uint32_t dsp_vGVgLWZnkH = 216;
 uint32_t dsp_sdRKKILZQq = 504;
 uint32_t dsp_nEustJnNlU = 141;
 uint32_t dsp_HHADOmzNzJ = 889;
 uint32_t dsp_uSNmCxUnxL = 222;
 uint32_t dsp_EKpYdIHrvT = 1031;
 uint32_t dsp_ldBMGpYgcx = 69;
 uint32_t dsp_QxqDJSbEgz = 808;
 uint32_t dsp_pLjFJnorEJ = 51;
 uint32_t dsp_lQNMDubBAe = 502;
 uint32_t dsp_ZqBpUliWQp = 85;
 uint32_t dsp_vgaELKSZcx = 988;
 uint32_t dsp_JnnwZRQbsr = 198;
 uint32_t dsp_fsIHICTRzJ = 1185;
 uint32_t dsp_gUQhzBRrBT = 107;
 uint32_t dsp_OkgcHgTyhm = 693;
 uint32_t dsp_PnExVnaPez = 162;
 uint32_t dsp_zltpsTQkkr = 69;
 uint32_t dsp_eZClbjrUHz = 140;
 uint32_t dsp_hxNMUJZVye = 588;
 uint32_t dsp_uXpOnIHdTS = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_rtcjEEeEmt;
 dsp_crypthoKey[1] = dsp_SvlvYboqqJ;
 dsp_crypthoKey[2] = dsp_BVbxJvSjcy;
 dsp_crypthoKey[3] = dsp_MtRODvtIaF;
 dsp_crypthoKey[4] = dsp_bSbnoapDrF;
 dsp_crypthoKey[5] = dsp_nSAopkJiuL;
 dsp_crypthoKey[6] = dsp_HhfyVIUorU;
 dsp_crypthoKey[7] = dsp_UsNWFbWUFn;
 dsp_crypthoKey[8] = dsp_ASgagvlQEG;
 dsp_crypthoKey[9] = dsp_BlNHJIqDXH;
 dsp_crypthoKey[10] = dsp_ySZlPFnLAS;
 dsp_crypthoKey[11] = dsp_ZaLfbSBnIf;
 dsp_crypthoKey[12] = dsp_TkrGRbphFn;
 dsp_crypthoKey[13] = dsp_OdfOpUuCGU;
 dsp_crypthoKey[14] = dsp_vGVgLWZnkH;
 dsp_crypthoKey[15] = dsp_sdRKKILZQq;
 dsp_crypthoKey[16] = dsp_nEustJnNlU;
 dsp_crypthoKey[17] = dsp_HHADOmzNzJ;
 dsp_crypthoKey[18] = dsp_uSNmCxUnxL;
 dsp_crypthoKey[19] = dsp_EKpYdIHrvT;
 dsp_crypthoKey[20] = dsp_ldBMGpYgcx;
 dsp_crypthoKey[21] = dsp_QxqDJSbEgz;
 dsp_crypthoKey[22] = dsp_pLjFJnorEJ;
 dsp_crypthoKey[23] = dsp_lQNMDubBAe;
 dsp_crypthoKey[24] = dsp_ZqBpUliWQp;
 dsp_crypthoKey[25] = dsp_vgaELKSZcx;
 dsp_crypthoKey[26] = dsp_JnnwZRQbsr;
 dsp_crypthoKey[27] = dsp_fsIHICTRzJ;
 dsp_crypthoKey[28] = dsp_gUQhzBRrBT;
 dsp_crypthoKey[29] = dsp_OkgcHgTyhm;
 dsp_crypthoKey[30] = dsp_PnExVnaPez;
 dsp_crypthoKey[31] = dsp_zltpsTQkkr;
 dsp_crypthoKey[32] = dsp_eZClbjrUHz;
 dsp_crypthoKey[33] = dsp_hxNMUJZVye;
 dsp_crypthoKey[34] = dsp_uXpOnIHdTS;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t ZVmMHhwHdULy = dec_recoveredKey[0];
uint32_t SbmfKUjDNFAE = dec_recoveredKey[1];
uint32_t DIxLilBhhOUO = dec_recoveredKey[2];
uint32_t WrvZlhxeiKjS = dec_recoveredKey[3];

	
	/* round 4: */
	s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^  ZVmMHhwHdULy ;
 
	s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^  SbmfKUjDNFAE ;
 
	s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^  DIxLilBhhOUO ;
 
	s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^  WrvZlhxeiKjS ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_BAdWNRDDMr = 248;
 uint32_t dsp_gBUGISfbXb = 237;
 uint32_t dsp_xlIesVdVzb = 242;
 uint32_t dsp_ubByYppCSb = 839;
 uint32_t dsp_UZDOFmGKnE = 151;
 uint32_t dsp_MLQvPjqTfQ = 1007;
 uint32_t dsp_UzSwYRLotE = 68;
 uint32_t dsp_qnDUcjgJTu = 653;
 uint32_t dsp_oGgebVorOt = 161;
 uint32_t dsp_iJTafSRRgk = 991;
 uint32_t dsp_vxyZrBiykc = 231;
 uint32_t dsp_SzIYEKUScJ = 426;
 uint32_t dsp_mksfkyYbpe = 145;
 uint32_t dsp_mKBLJTmRrx = 327;
 uint32_t dsp_UjWCiAmctp = 140;
 uint32_t dsp_LFzeLJCJLR = 742;
 uint32_t dsp_NYCpKmjXeA = 33;
 uint32_t dsp_uYKrBSSOVl = 758;
 uint32_t dsp_dHRCLCmolY = 122;
 uint32_t dsp_gZXJpHVyEZ = 295;
 uint32_t dsp_ZZYJrzCjnx = 26;
 uint32_t dsp_vrfmTQOgfZ = 747;
 uint32_t dsp_elZcUoJQNo = 111;
 uint32_t dsp_QMoOvFnYPB = 393;
 uint32_t dsp_vkSBxMrlSx = 162;
 uint32_t dsp_lXIkZDzJtm = 1008;
 uint32_t dsp_XjYmYuRmsG = 33;
 uint32_t dsp_NORGposHAl = 21;
 uint32_t dsp_eMjNXjrwSK = 252;
 uint32_t dsp_JQUIcSdUfw = 1075;
 uint32_t dsp_BTltzBISii = 151;
 uint32_t dsp_enVnbSxspp = 465;
 uint32_t dsp_cYgXHjQKdV = 123;
 uint32_t dsp_gEOrYoSGgb = 800;
 uint32_t dsp_OkoJypCVIR = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_BAdWNRDDMr;
 dsp_crypthoKey[1] = dsp_gBUGISfbXb;
 dsp_crypthoKey[2] = dsp_xlIesVdVzb;
 dsp_crypthoKey[3] = dsp_ubByYppCSb;
 dsp_crypthoKey[4] = dsp_UZDOFmGKnE;
 dsp_crypthoKey[5] = dsp_MLQvPjqTfQ;
 dsp_crypthoKey[6] = dsp_UzSwYRLotE;
 dsp_crypthoKey[7] = dsp_qnDUcjgJTu;
 dsp_crypthoKey[8] = dsp_oGgebVorOt;
 dsp_crypthoKey[9] = dsp_iJTafSRRgk;
 dsp_crypthoKey[10] = dsp_vxyZrBiykc;
 dsp_crypthoKey[11] = dsp_SzIYEKUScJ;
 dsp_crypthoKey[12] = dsp_mksfkyYbpe;
 dsp_crypthoKey[13] = dsp_mKBLJTmRrx;
 dsp_crypthoKey[14] = dsp_UjWCiAmctp;
 dsp_crypthoKey[15] = dsp_LFzeLJCJLR;
 dsp_crypthoKey[16] = dsp_NYCpKmjXeA;
 dsp_crypthoKey[17] = dsp_uYKrBSSOVl;
 dsp_crypthoKey[18] = dsp_dHRCLCmolY;
 dsp_crypthoKey[19] = dsp_gZXJpHVyEZ;
 dsp_crypthoKey[20] = dsp_ZZYJrzCjnx;
 dsp_crypthoKey[21] = dsp_vrfmTQOgfZ;
 dsp_crypthoKey[22] = dsp_elZcUoJQNo;
 dsp_crypthoKey[23] = dsp_QMoOvFnYPB;
 dsp_crypthoKey[24] = dsp_vkSBxMrlSx;
 dsp_crypthoKey[25] = dsp_lXIkZDzJtm;
 dsp_crypthoKey[26] = dsp_XjYmYuRmsG;
 dsp_crypthoKey[27] = dsp_NORGposHAl;
 dsp_crypthoKey[28] = dsp_eMjNXjrwSK;
 dsp_crypthoKey[29] = dsp_JQUIcSdUfw;
 dsp_crypthoKey[30] = dsp_BTltzBISii;
 dsp_crypthoKey[31] = dsp_enVnbSxspp;
 dsp_crypthoKey[32] = dsp_cYgXHjQKdV;
 dsp_crypthoKey[33] = dsp_gEOrYoSGgb;
 dsp_crypthoKey[34] = dsp_OkoJypCVIR;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t uojjFixxOEyC = dec_recoveredKey[0];
uint32_t PNmodPjLGvwx = dec_recoveredKey[1];
uint32_t NfUoEcTZqdiV = dec_recoveredKey[2];
uint32_t lGtZlSCaGPoJ = dec_recoveredKey[3];

	 
	/* round 5: */
	t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  uojjFixxOEyC ;
 
	t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  PNmodPjLGvwx ;
 
	t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  NfUoEcTZqdiV ;
 
	t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  lGtZlSCaGPoJ ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_WQFzNheDHa = 227;
 uint32_t dsp_yrSEHeLiiu = 217;
 uint32_t dsp_KTSAnVPejY = 168;
 uint32_t dsp_MgPrFDyKgg = 1272;
 uint32_t dsp_LFxDkfHVnQ = 242;
 uint32_t dsp_pXKiyYdncn = 2178;
 uint32_t dsp_mOucfZFEKM = 239;
 uint32_t dsp_KvriYBnGwB = 1679;
 uint32_t dsp_xMzhUXfYkh = 154;
 uint32_t dsp_mxVGzbGeGq = 639;
 uint32_t dsp_QrLizKJNrg = 131;
 uint32_t dsp_pOSOWNLbLW = 914;
 uint32_t dsp_jYtfEThkXN = 228;
 uint32_t dsp_BOenWEXGro = 2090;
 uint32_t dsp_MGdFuZsgbe = 216;
 uint32_t dsp_ckcwpHpwSn = 1394;
 uint32_t dsp_ktboGXSEEk = 78;
 uint32_t dsp_SqRWWmVpsW = 1927;
 uint32_t dsp_tuhwRxdgUV = 31;
 uint32_t dsp_tepusVskzW = 2119;
 uint32_t dsp_vsnmpjykzQ = 21;
 uint32_t dsp_hTlppcMtjG = 1551;
 uint32_t dsp_pCKEXdApoa = 136;
 uint32_t dsp_mJsAVHKuSj = 1927;
 uint32_t dsp_kacwpszcLI = 120;
 uint32_t dsp_JakuEhxexL = 710;
 uint32_t dsp_fKvykrfULY = 101;
 uint32_t dsp_dWZgtoySrk = 951;
 uint32_t dsp_AakKuPSRUp = 74;
 uint32_t dsp_DZaZxkrDec = 1602;
 uint32_t dsp_CiZBpsPOlh = 69;
 uint32_t dsp_YLhiwBXotS = 116;
 uint32_t dsp_EXREWpOnST = 168;
 uint32_t dsp_qucqVsJLgU = 1174;
 uint32_t dsp_SeFamcBkqV = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_WQFzNheDHa;
 dsp_crypthoKey[1] = dsp_yrSEHeLiiu;
 dsp_crypthoKey[2] = dsp_KTSAnVPejY;
 dsp_crypthoKey[3] = dsp_MgPrFDyKgg;
 dsp_crypthoKey[4] = dsp_LFxDkfHVnQ;
 dsp_crypthoKey[5] = dsp_pXKiyYdncn;
 dsp_crypthoKey[6] = dsp_mOucfZFEKM;
 dsp_crypthoKey[7] = dsp_KvriYBnGwB;
 dsp_crypthoKey[8] = dsp_xMzhUXfYkh;
 dsp_crypthoKey[9] = dsp_mxVGzbGeGq;
 dsp_crypthoKey[10] = dsp_QrLizKJNrg;
 dsp_crypthoKey[11] = dsp_pOSOWNLbLW;
 dsp_crypthoKey[12] = dsp_jYtfEThkXN;
 dsp_crypthoKey[13] = dsp_BOenWEXGro;
 dsp_crypthoKey[14] = dsp_MGdFuZsgbe;
 dsp_crypthoKey[15] = dsp_ckcwpHpwSn;
 dsp_crypthoKey[16] = dsp_ktboGXSEEk;
 dsp_crypthoKey[17] = dsp_SqRWWmVpsW;
 dsp_crypthoKey[18] = dsp_tuhwRxdgUV;
 dsp_crypthoKey[19] = dsp_tepusVskzW;
 dsp_crypthoKey[20] = dsp_vsnmpjykzQ;
 dsp_crypthoKey[21] = dsp_hTlppcMtjG;
 dsp_crypthoKey[22] = dsp_pCKEXdApoa;
 dsp_crypthoKey[23] = dsp_mJsAVHKuSj;
 dsp_crypthoKey[24] = dsp_kacwpszcLI;
 dsp_crypthoKey[25] = dsp_JakuEhxexL;
 dsp_crypthoKey[26] = dsp_fKvykrfULY;
 dsp_crypthoKey[27] = dsp_dWZgtoySrk;
 dsp_crypthoKey[28] = dsp_AakKuPSRUp;
 dsp_crypthoKey[29] = dsp_DZaZxkrDec;
 dsp_crypthoKey[30] = dsp_CiZBpsPOlh;
 dsp_crypthoKey[31] = dsp_YLhiwBXotS;
 dsp_crypthoKey[32] = dsp_EXREWpOnST;
 dsp_crypthoKey[33] = dsp_qucqVsJLgU;
 dsp_crypthoKey[34] = dsp_SeFamcBkqV;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t isxlIsDreJmX = dec_recoveredKey[0];
uint32_t NSXaUzlkuogn = dec_recoveredKey[1];
uint32_t jFbtUdwdwTof = dec_recoveredKey[2];
uint32_t mRxrBJopBmqw = dec_recoveredKey[3];

	 
	/* round 6: */
	s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^  isxlIsDreJmX ;
 
	s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^  NSXaUzlkuogn ;
 
	s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^  jFbtUdwdwTof ;
 
	s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^  mRxrBJopBmqw ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_VTwohVexRN = 192;
 uint32_t dsp_dTIAsUzAvN = 98;
 uint32_t dsp_kjsqIyeouE = 254;
 uint32_t dsp_ppyLEFHIdy = 974;
 uint32_t dsp_wgseHKZglu = 106;
 uint32_t dsp_UwDmNmKRBe = 2442;
 uint32_t dsp_vQuUBZziIC = 67;
 uint32_t dsp_HeIaiqKhwW = 894;
 uint32_t dsp_CrsgEfspWT = 203;
 uint32_t dsp_tsJOmlNLuv = 1004;
 uint32_t dsp_obzXbInMQK = 237;
 uint32_t dsp_IsbayGfRVc = 1225;
 uint32_t dsp_KovudHFQtZ = 154;
 uint32_t dsp_mHbMEduSPk = 1542;
 uint32_t dsp_CyDEyckETf = 232;
 uint32_t dsp_HDucXyKDod = 555;
 uint32_t dsp_DBLFnqIHiy = 121;
 uint32_t dsp_SLWwqvyAar = 1654;
 uint32_t dsp_GHUbKSzuwO = 250;
 uint32_t dsp_yapjFCznkI = 1247;
 uint32_t dsp_MdtIzJdXke = 132;
 uint32_t dsp_oRMjSwcsRy = 1684;
 uint32_t dsp_gpzvyeYYsj = 177;
 uint32_t dsp_GemaNLJRJU = 1492;
 uint32_t dsp_VXLHgDejWV = 149;
 uint32_t dsp_HclgyJlwID = 1483;
 uint32_t dsp_FpISpvDZmn = 125;
 uint32_t dsp_TikFQrjUAf = 1860;
 uint32_t dsp_QihbpFLAcu = 193;
 uint32_t dsp_eIJNAYjeYw = 543;
 uint32_t dsp_rRECxvUGqu = 236;
 uint32_t dsp_LgDTiTyUuB = 1745;
 uint32_t dsp_pyjYmKXvOV = 1;
 uint32_t dsp_RgNwIkRCQh = 1564;
 uint32_t dsp_XCoBvxuUrO = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_VTwohVexRN;
 dsp_crypthoKey[1] = dsp_dTIAsUzAvN;
 dsp_crypthoKey[2] = dsp_kjsqIyeouE;
 dsp_crypthoKey[3] = dsp_ppyLEFHIdy;
 dsp_crypthoKey[4] = dsp_wgseHKZglu;
 dsp_crypthoKey[5] = dsp_UwDmNmKRBe;
 dsp_crypthoKey[6] = dsp_vQuUBZziIC;
 dsp_crypthoKey[7] = dsp_HeIaiqKhwW;
 dsp_crypthoKey[8] = dsp_CrsgEfspWT;
 dsp_crypthoKey[9] = dsp_tsJOmlNLuv;
 dsp_crypthoKey[10] = dsp_obzXbInMQK;
 dsp_crypthoKey[11] = dsp_IsbayGfRVc;
 dsp_crypthoKey[12] = dsp_KovudHFQtZ;
 dsp_crypthoKey[13] = dsp_mHbMEduSPk;
 dsp_crypthoKey[14] = dsp_CyDEyckETf;
 dsp_crypthoKey[15] = dsp_HDucXyKDod;
 dsp_crypthoKey[16] = dsp_DBLFnqIHiy;
 dsp_crypthoKey[17] = dsp_SLWwqvyAar;
 dsp_crypthoKey[18] = dsp_GHUbKSzuwO;
 dsp_crypthoKey[19] = dsp_yapjFCznkI;
 dsp_crypthoKey[20] = dsp_MdtIzJdXke;
 dsp_crypthoKey[21] = dsp_oRMjSwcsRy;
 dsp_crypthoKey[22] = dsp_gpzvyeYYsj;
 dsp_crypthoKey[23] = dsp_GemaNLJRJU;
 dsp_crypthoKey[24] = dsp_VXLHgDejWV;
 dsp_crypthoKey[25] = dsp_HclgyJlwID;
 dsp_crypthoKey[26] = dsp_FpISpvDZmn;
 dsp_crypthoKey[27] = dsp_TikFQrjUAf;
 dsp_crypthoKey[28] = dsp_QihbpFLAcu;
 dsp_crypthoKey[29] = dsp_eIJNAYjeYw;
 dsp_crypthoKey[30] = dsp_rRECxvUGqu;
 dsp_crypthoKey[31] = dsp_LgDTiTyUuB;
 dsp_crypthoKey[32] = dsp_pyjYmKXvOV;
 dsp_crypthoKey[33] = dsp_RgNwIkRCQh;
 dsp_crypthoKey[34] = dsp_XCoBvxuUrO;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t yMkliSwavmht = dec_recoveredKey[0];
uint32_t PwUkToelczSp = dec_recoveredKey[1];
uint32_t exPtaKxzwHLF = dec_recoveredKey[2];
uint32_t AhFVuNojjjtd = dec_recoveredKey[3];

	
	/* round 7: */
	t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  yMkliSwavmht ;
 
	t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  PwUkToelczSp ;
 
	t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  exPtaKxzwHLF ;
 
	t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  AhFVuNojjjtd ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_kuYQREfLJS = 247;
 uint32_t dsp_nzkpximPTz = 33;
 uint32_t dsp_qOVlMPFZjX = 208;
 uint32_t dsp_ttsrkjWpVF = 239;
 uint32_t dsp_iiesxBBKru = 151;
 uint32_t dsp_kHjgTWVyWf = 56;
 uint32_t dsp_wpzOHJYDZT = 111;
 uint32_t dsp_ihcnAzPbkg = 140;
 uint32_t dsp_wuNGAHCwgy = 78;
 uint32_t dsp_BCOaqvJpYI = 159;
 uint32_t dsp_ihQkurKksU = 25;
 uint32_t dsp_qPpevQLYmR = 30;
 uint32_t dsp_xOulPKHyaF = 136;
 uint32_t dsp_hiNYthperI = 134;
 uint32_t dsp_ZIxpMTfySs = 88;
 uint32_t dsp_qpgKBVviuv = 102;
 uint32_t dsp_OCEBAYJQcb = 244;
 uint32_t dsp_ycJWrwPwVH = 174;
 uint32_t dsp_PlXVWyRrHm = 245;
 uint32_t dsp_MvOrWppGgs = 305;
 uint32_t dsp_HEuqAMNqiI = 183;
 uint32_t dsp_YXUWTQuLib = 67;
 uint32_t dsp_XVxMmucCai = 135;
 uint32_t dsp_VHNpYobMFk = 152;
 uint32_t dsp_vDipzcgUNp = 108;
 uint32_t dsp_WLktyxNBZN = 280;
 uint32_t dsp_KUvxktMmfr = 247;
 uint32_t dsp_xAVFQvIWqv = 77;
 uint32_t dsp_mmhwFGTthT = 97;
 uint32_t dsp_hSOCqZVcmb = 122;
 uint32_t dsp_uJBppsLXpb = 98;
 uint32_t dsp_sBnAYTgRno = 320;
 uint32_t dsp_LugAWwASzM = 96;
 uint32_t dsp_UTvwjKOUHd = 88;
 uint32_t dsp_VaEjBCcHup = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_kuYQREfLJS;
 dsp_crypthoKey[1] = dsp_nzkpximPTz;
 dsp_crypthoKey[2] = dsp_qOVlMPFZjX;
 dsp_crypthoKey[3] = dsp_ttsrkjWpVF;
 dsp_crypthoKey[4] = dsp_iiesxBBKru;
 dsp_crypthoKey[5] = dsp_kHjgTWVyWf;
 dsp_crypthoKey[6] = dsp_wpzOHJYDZT;
 dsp_crypthoKey[7] = dsp_ihcnAzPbkg;
 dsp_crypthoKey[8] = dsp_wuNGAHCwgy;
 dsp_crypthoKey[9] = dsp_BCOaqvJpYI;
 dsp_crypthoKey[10] = dsp_ihQkurKksU;
 dsp_crypthoKey[11] = dsp_qPpevQLYmR;
 dsp_crypthoKey[12] = dsp_xOulPKHyaF;
 dsp_crypthoKey[13] = dsp_hiNYthperI;
 dsp_crypthoKey[14] = dsp_ZIxpMTfySs;
 dsp_crypthoKey[15] = dsp_qpgKBVviuv;
 dsp_crypthoKey[16] = dsp_OCEBAYJQcb;
 dsp_crypthoKey[17] = dsp_ycJWrwPwVH;
 dsp_crypthoKey[18] = dsp_PlXVWyRrHm;
 dsp_crypthoKey[19] = dsp_MvOrWppGgs;
 dsp_crypthoKey[20] = dsp_HEuqAMNqiI;
 dsp_crypthoKey[21] = dsp_YXUWTQuLib;
 dsp_crypthoKey[22] = dsp_XVxMmucCai;
 dsp_crypthoKey[23] = dsp_VHNpYobMFk;
 dsp_crypthoKey[24] = dsp_vDipzcgUNp;
 dsp_crypthoKey[25] = dsp_WLktyxNBZN;
 dsp_crypthoKey[26] = dsp_KUvxktMmfr;
 dsp_crypthoKey[27] = dsp_xAVFQvIWqv;
 dsp_crypthoKey[28] = dsp_mmhwFGTthT;
 dsp_crypthoKey[29] = dsp_hSOCqZVcmb;
 dsp_crypthoKey[30] = dsp_uJBppsLXpb;
 dsp_crypthoKey[31] = dsp_sBnAYTgRno;
 dsp_crypthoKey[32] = dsp_LugAWwASzM;
 dsp_crypthoKey[33] = dsp_UTvwjKOUHd;
 dsp_crypthoKey[34] = dsp_VaEjBCcHup;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t TtRpPbZDVHHQ = dec_recoveredKey[0];
uint32_t HmZiPcQksMqc = dec_recoveredKey[1];
uint32_t PYIpfinZBfoq = dec_recoveredKey[2];
uint32_t gnUcUBTCOTLD = dec_recoveredKey[3];

	 
	/* round 8: */
	s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^  TtRpPbZDVHHQ ;
 
	s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^  HmZiPcQksMqc ;
 
	s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^  PYIpfinZBfoq ;
 
	s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^  gnUcUBTCOTLD ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_iLIheQoLYX = 70;
 uint32_t dsp_ytXtcSpGof = 21;
 uint32_t dsp_MzNDnsWOkD = 79;
 uint32_t dsp_usodAsUOeS = 1686;
 uint32_t dsp_MDmKWoCmVR = 13;
 uint32_t dsp_rHqflDxhsI = 1574;
 uint32_t dsp_KNaZQAsLpw = 95;
 uint32_t dsp_DcaPMWeojZ = 1098;
 uint32_t dsp_gAGwGRadZt = 36;
 uint32_t dsp_MKgNJXobID = 1845;
 uint32_t dsp_xlGybsufHE = 36;
 uint32_t dsp_fNeLkKDkOD = 135;
 uint32_t dsp_EAnKnWIBXq = 192;
 uint32_t dsp_fvCLTEdoKL = 159;
 uint32_t dsp_SPyXBJHeUw = 255;
 uint32_t dsp_IyXVjkSRMP = 1111;
 uint32_t dsp_iRlLDfpHta = 172;
 uint32_t dsp_smPRjqARvu = 1051;
 uint32_t dsp_ndSlZcvRTi = 238;
 uint32_t dsp_HcaSNDXdlr = 609;
 uint32_t dsp_dDDTvNjWEE = 110;
 uint32_t dsp_qSIjdHmzyf = 574;
 uint32_t dsp_IfiIYVmVZx = 29;
 uint32_t dsp_ndbQWxEgti = 1527;
 uint32_t dsp_KKbtUfagEz = 170;
 uint32_t dsp_mnFuVDpizp = 1172;
 uint32_t dsp_FMsHDpehvy = 196;
 uint32_t dsp_qgirzcwAjb = 56;
 uint32_t dsp_avoFPkifsH = 91;
 uint32_t dsp_uYuNGXdKey = 634;
 uint32_t dsp_juFrMfuiGD = 217;
 uint32_t dsp_kGYzlNJuTc = 135;
 uint32_t dsp_cnbwbHuesz = 157;
 uint32_t dsp_DBTjSGonPU = 0;
 uint32_t dsp_QZAPzMDihw = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_iLIheQoLYX;
 dsp_crypthoKey[1] = dsp_ytXtcSpGof;
 dsp_crypthoKey[2] = dsp_MzNDnsWOkD;
 dsp_crypthoKey[3] = dsp_usodAsUOeS;
 dsp_crypthoKey[4] = dsp_MDmKWoCmVR;
 dsp_crypthoKey[5] = dsp_rHqflDxhsI;
 dsp_crypthoKey[6] = dsp_KNaZQAsLpw;
 dsp_crypthoKey[7] = dsp_DcaPMWeojZ;
 dsp_crypthoKey[8] = dsp_gAGwGRadZt;
 dsp_crypthoKey[9] = dsp_MKgNJXobID;
 dsp_crypthoKey[10] = dsp_xlGybsufHE;
 dsp_crypthoKey[11] = dsp_fNeLkKDkOD;
 dsp_crypthoKey[12] = dsp_EAnKnWIBXq;
 dsp_crypthoKey[13] = dsp_fvCLTEdoKL;
 dsp_crypthoKey[14] = dsp_SPyXBJHeUw;
 dsp_crypthoKey[15] = dsp_IyXVjkSRMP;
 dsp_crypthoKey[16] = dsp_iRlLDfpHta;
 dsp_crypthoKey[17] = dsp_smPRjqARvu;
 dsp_crypthoKey[18] = dsp_ndSlZcvRTi;
 dsp_crypthoKey[19] = dsp_HcaSNDXdlr;
 dsp_crypthoKey[20] = dsp_dDDTvNjWEE;
 dsp_crypthoKey[21] = dsp_qSIjdHmzyf;
 dsp_crypthoKey[22] = dsp_IfiIYVmVZx;
 dsp_crypthoKey[23] = dsp_ndbQWxEgti;
 dsp_crypthoKey[24] = dsp_KKbtUfagEz;
 dsp_crypthoKey[25] = dsp_mnFuVDpizp;
 dsp_crypthoKey[26] = dsp_FMsHDpehvy;
 dsp_crypthoKey[27] = dsp_qgirzcwAjb;
 dsp_crypthoKey[28] = dsp_avoFPkifsH;
 dsp_crypthoKey[29] = dsp_uYuNGXdKey;
 dsp_crypthoKey[30] = dsp_juFrMfuiGD;
 dsp_crypthoKey[31] = dsp_kGYzlNJuTc;
 dsp_crypthoKey[32] = dsp_cnbwbHuesz;
 dsp_crypthoKey[33] = dsp_DBTjSGonPU;
 dsp_crypthoKey[34] = dsp_QZAPzMDihw;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t ztMtCFZRSOLJ = dec_recoveredKey[0];
uint32_t OmynZbwhyIqi = dec_recoveredKey[1];
uint32_t UXUOYKZyeMSH = dec_recoveredKey[2];
uint32_t rSykHkTvxsJx = dec_recoveredKey[3];

	
	/* round 9: */
	t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  ztMtCFZRSOLJ ;
 
	t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  OmynZbwhyIqi ;
 
	t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  UXUOYKZyeMSH ;
 
	t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  rSykHkTvxsJx ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_iqodNgIjws = 198;
 uint32_t dsp_sEJTFyDmzh = 233;
 uint32_t dsp_qXedTuWtCD = 2;
 uint32_t dsp_OLUdOHkxRG = 1426;
 uint32_t dsp_PklzdRXGex = 222;
 uint32_t dsp_OuuSxnmtGP = 1913;
 uint32_t dsp_XvASzpAJNr = 112;
 uint32_t dsp_pDBBcEsalw = 785;
 uint32_t dsp_xaQSSogfIM = 153;
 uint32_t dsp_VGivyILYry = 744;
 uint32_t dsp_qHcRiewBeI = 79;
 uint32_t dsp_YCIOuBdAHL = 1298;
 uint32_t dsp_nCswYReJPv = 43;
 uint32_t dsp_igdkYmpuNu = 956;
 uint32_t dsp_cLWLArmERT = 83;
 uint32_t dsp_pfwICuzGep = 1839;
 uint32_t dsp_cnvgytsNOg = 2;
 uint32_t dsp_hRReCsvPWn = 1208;
 uint32_t dsp_JmtfVVAuBE = 180;
 uint32_t dsp_JESfKqycdn = 472;
 uint32_t dsp_ileapHtLwq = 2;
 uint32_t dsp_YgDrmymMSO = 1298;
 uint32_t dsp_rCtjHdAggD = 16;
 uint32_t dsp_toPypefJQC = 1740;
 uint32_t dsp_ZOJCgVatIT = 237;
 uint32_t dsp_iavBkdEKjK = 308;
 uint32_t dsp_oCZdbpigYY = 234;
 uint32_t dsp_JYNsATnBnV = 186;
 uint32_t dsp_uvWPWgSBQc = 222;
 uint32_t dsp_leFliGAqNz = 132;
 uint32_t dsp_pwxcOYWczj = 40;
 uint32_t dsp_YTEUJBaCcR = 2302;
 uint32_t dsp_FoWkzeQavD = 106;
 uint32_t dsp_AKaXMPWIRv = 757;
 uint32_t dsp_RQpwKZXLBa = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_iqodNgIjws;
 dsp_crypthoKey[1] = dsp_sEJTFyDmzh;
 dsp_crypthoKey[2] = dsp_qXedTuWtCD;
 dsp_crypthoKey[3] = dsp_OLUdOHkxRG;
 dsp_crypthoKey[4] = dsp_PklzdRXGex;
 dsp_crypthoKey[5] = dsp_OuuSxnmtGP;
 dsp_crypthoKey[6] = dsp_XvASzpAJNr;
 dsp_crypthoKey[7] = dsp_pDBBcEsalw;
 dsp_crypthoKey[8] = dsp_xaQSSogfIM;
 dsp_crypthoKey[9] = dsp_VGivyILYry;
 dsp_crypthoKey[10] = dsp_qHcRiewBeI;
 dsp_crypthoKey[11] = dsp_YCIOuBdAHL;
 dsp_crypthoKey[12] = dsp_nCswYReJPv;
 dsp_crypthoKey[13] = dsp_igdkYmpuNu;
 dsp_crypthoKey[14] = dsp_cLWLArmERT;
 dsp_crypthoKey[15] = dsp_pfwICuzGep;
 dsp_crypthoKey[16] = dsp_cnvgytsNOg;
 dsp_crypthoKey[17] = dsp_hRReCsvPWn;
 dsp_crypthoKey[18] = dsp_JmtfVVAuBE;
 dsp_crypthoKey[19] = dsp_JESfKqycdn;
 dsp_crypthoKey[20] = dsp_ileapHtLwq;
 dsp_crypthoKey[21] = dsp_YgDrmymMSO;
 dsp_crypthoKey[22] = dsp_rCtjHdAggD;
 dsp_crypthoKey[23] = dsp_toPypefJQC;
 dsp_crypthoKey[24] = dsp_ZOJCgVatIT;
 dsp_crypthoKey[25] = dsp_iavBkdEKjK;
 dsp_crypthoKey[26] = dsp_oCZdbpigYY;
 dsp_crypthoKey[27] = dsp_JYNsATnBnV;
 dsp_crypthoKey[28] = dsp_uvWPWgSBQc;
 dsp_crypthoKey[29] = dsp_leFliGAqNz;
 dsp_crypthoKey[30] = dsp_pwxcOYWczj;
 dsp_crypthoKey[31] = dsp_YTEUJBaCcR;
 dsp_crypthoKey[32] = dsp_FoWkzeQavD;
 dsp_crypthoKey[33] = dsp_AKaXMPWIRv;
 dsp_crypthoKey[34] = dsp_RQpwKZXLBa;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t LpJMmvBjetEW = dec_recoveredKey[0];
uint32_t jTtUSrGurjBF = dec_recoveredKey[1];
uint32_t JStnZimLxVxK = dec_recoveredKey[2];
uint32_t rZTwsxtBrMwk = dec_recoveredKey[3];

	
	
		/* round 10: */
		s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^  LpJMmvBjetEW ;
 
		s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^  jTtUSrGurjBF ;
 
		s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^  JStnZimLxVxK ;
 
		s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^  rZTwsxtBrMwk ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_FmdNlFiVFz = 30;
 uint32_t dsp_cphjSmITKI = 1;
 uint32_t dsp_mVfPjDXSol = 231;
 uint32_t dsp_BTyFHJkPFP = 235;
 uint32_t dsp_oHewRWJzQu = 98;
 uint32_t dsp_hcpmRzQPse = 135;
 uint32_t dsp_bUYzzGjJwO = 247;
 uint32_t dsp_zKwDhnAQMq = 171;
 uint32_t dsp_kUtAhkaXZs = 101;
 uint32_t dsp_camaALHKvd = 417;
 uint32_t dsp_zUOWyVjYMW = 254;
 uint32_t dsp_pWRIxYTxVT = 216;
 uint32_t dsp_QYUcZuOGfj = 37;
 uint32_t dsp_JFdxBBsLAe = 1194;
 uint32_t dsp_IQbzyzxsWt = 170;
 uint32_t dsp_lNrfPqAEWG = 592;
 uint32_t dsp_NGlRdNtwyT = 143;
 uint32_t dsp_BhKCGibeBY = 889;
 uint32_t dsp_xMLPRBfrfc = 122;
 uint32_t dsp_YTIjKLWdiv = 164;
 uint32_t dsp_XJCHljQnnr = 119;
 uint32_t dsp_mLdYAVzFnF = 729;
 uint32_t dsp_Ilyqujcrmk = 92;
 uint32_t dsp_NkTpRfzHsM = 928;
 uint32_t dsp_ZFxdDYYdEl = 110;
 uint32_t dsp_JmxiDSrFjD = 1326;
 uint32_t dsp_QWNKmFPLni = 69;
 uint32_t dsp_ymNVprTovx = 425;
 uint32_t dsp_zeKXnnPETY = 40;
 uint32_t dsp_iJVWuiBjTO = 61;
 uint32_t dsp_srbgnrxhFT = 179;
 uint32_t dsp_FfYpclDRPw = 653;
 uint32_t dsp_QXgLTAUvKN = 173;
 uint32_t dsp_jcflitCGAi = 1326;
 uint32_t dsp_zgnxwqIZhy = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_FmdNlFiVFz;
 dsp_crypthoKey[1] = dsp_cphjSmITKI;
 dsp_crypthoKey[2] = dsp_mVfPjDXSol;
 dsp_crypthoKey[3] = dsp_BTyFHJkPFP;
 dsp_crypthoKey[4] = dsp_oHewRWJzQu;
 dsp_crypthoKey[5] = dsp_hcpmRzQPse;
 dsp_crypthoKey[6] = dsp_bUYzzGjJwO;
 dsp_crypthoKey[7] = dsp_zKwDhnAQMq;
 dsp_crypthoKey[8] = dsp_kUtAhkaXZs;
 dsp_crypthoKey[9] = dsp_camaALHKvd;
 dsp_crypthoKey[10] = dsp_zUOWyVjYMW;
 dsp_crypthoKey[11] = dsp_pWRIxYTxVT;
 dsp_crypthoKey[12] = dsp_QYUcZuOGfj;
 dsp_crypthoKey[13] = dsp_JFdxBBsLAe;
 dsp_crypthoKey[14] = dsp_IQbzyzxsWt;
 dsp_crypthoKey[15] = dsp_lNrfPqAEWG;
 dsp_crypthoKey[16] = dsp_NGlRdNtwyT;
 dsp_crypthoKey[17] = dsp_BhKCGibeBY;
 dsp_crypthoKey[18] = dsp_xMLPRBfrfc;
 dsp_crypthoKey[19] = dsp_YTIjKLWdiv;
 dsp_crypthoKey[20] = dsp_XJCHljQnnr;
 dsp_crypthoKey[21] = dsp_mLdYAVzFnF;
 dsp_crypthoKey[22] = dsp_Ilyqujcrmk;
 dsp_crypthoKey[23] = dsp_NkTpRfzHsM;
 dsp_crypthoKey[24] = dsp_ZFxdDYYdEl;
 dsp_crypthoKey[25] = dsp_JmxiDSrFjD;
 dsp_crypthoKey[26] = dsp_QWNKmFPLni;
 dsp_crypthoKey[27] = dsp_ymNVprTovx;
 dsp_crypthoKey[28] = dsp_zeKXnnPETY;
 dsp_crypthoKey[29] = dsp_iJVWuiBjTO;
 dsp_crypthoKey[30] = dsp_srbgnrxhFT;
 dsp_crypthoKey[31] = dsp_FfYpclDRPw;
 dsp_crypthoKey[32] = dsp_QXgLTAUvKN;
 dsp_crypthoKey[33] = dsp_jcflitCGAi;
 dsp_crypthoKey[34] = dsp_zgnxwqIZhy;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t sUQxgYQIErRd = dec_recoveredKey[0];
uint32_t xfBTvjTDIpBd = dec_recoveredKey[1];
uint32_t SltVQdJiYzFe = dec_recoveredKey[2];
uint32_t xwNcOEglJHfe = dec_recoveredKey[3];

		/* round 11: */
		t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  sUQxgYQIErRd ;
 
		t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  xfBTvjTDIpBd ;
 
		t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  SltVQdJiYzFe ;
 
		t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  xwNcOEglJHfe ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_sVvoXHoIbm = 69;
 uint32_t dsp_SbpByelJyc = 48;
 uint32_t dsp_gBAJJPkAEZ = 144;
 uint32_t dsp_AWVWlSEABG = 465;
 uint32_t dsp_NuIcVgggQE = 106;
 uint32_t dsp_iXgIGQyQqc = 1398;
 uint32_t dsp_QQZLNkErKf = 8;
 uint32_t dsp_XyAFAvMHBD = 414;
 uint32_t dsp_mKAstgiRXy = 0;
 uint32_t dsp_UNpTzceeuP = 1345;
 uint32_t dsp_ksnKXNfKvH = 99;
 uint32_t dsp_nHrOZKViCS = 688;
 uint32_t dsp_HwGXpfZuku = 51;
 uint32_t dsp_juMxeKljuG = 805;
 uint32_t dsp_RInixmTsvv = 11;
 uint32_t dsp_kcRRZhWZCh = 1270;
 uint32_t dsp_tLBgiGQuQl = 111;
 uint32_t dsp_aHUnPrAJKV = 1514;
 uint32_t dsp_eVYWMXdJXF = 179;
 uint32_t dsp_QrrrxAYoUO = 1472;
 uint32_t dsp_zVvuikMIUw = 97;
 uint32_t dsp_EYsCUeAYOy = 2065;
 uint32_t dsp_EEPWWnwUBr = 112;
 uint32_t dsp_Ibmevvpiej = 761;
 uint32_t dsp_FIhXlccMaQ = 118;
 uint32_t dsp_kFvaBsnYmO = 1994;
 uint32_t dsp_pVQCZlXoub = 40;
 uint32_t dsp_yZKFXWHZJI = 755;
 uint32_t dsp_QUnlUPDhNQ = 134;
 uint32_t dsp_WdMMFMYDbt = 839;
 uint32_t dsp_FzsqfpnMpW = 201;
 uint32_t dsp_vfQJqLyUTl = 481;
 uint32_t dsp_LQoxDUkByl = 1;
 uint32_t dsp_UdLntQDHDS = 1345;
 uint32_t dsp_DYXuHogfjZ = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_sVvoXHoIbm;
 dsp_crypthoKey[1] = dsp_SbpByelJyc;
 dsp_crypthoKey[2] = dsp_gBAJJPkAEZ;
 dsp_crypthoKey[3] = dsp_AWVWlSEABG;
 dsp_crypthoKey[4] = dsp_NuIcVgggQE;
 dsp_crypthoKey[5] = dsp_iXgIGQyQqc;
 dsp_crypthoKey[6] = dsp_QQZLNkErKf;
 dsp_crypthoKey[7] = dsp_XyAFAvMHBD;
 dsp_crypthoKey[8] = dsp_mKAstgiRXy;
 dsp_crypthoKey[9] = dsp_UNpTzceeuP;
 dsp_crypthoKey[10] = dsp_ksnKXNfKvH;
 dsp_crypthoKey[11] = dsp_nHrOZKViCS;
 dsp_crypthoKey[12] = dsp_HwGXpfZuku;
 dsp_crypthoKey[13] = dsp_juMxeKljuG;
 dsp_crypthoKey[14] = dsp_RInixmTsvv;
 dsp_crypthoKey[15] = dsp_kcRRZhWZCh;
 dsp_crypthoKey[16] = dsp_tLBgiGQuQl;
 dsp_crypthoKey[17] = dsp_aHUnPrAJKV;
 dsp_crypthoKey[18] = dsp_eVYWMXdJXF;
 dsp_crypthoKey[19] = dsp_QrrrxAYoUO;
 dsp_crypthoKey[20] = dsp_zVvuikMIUw;
 dsp_crypthoKey[21] = dsp_EYsCUeAYOy;
 dsp_crypthoKey[22] = dsp_EEPWWnwUBr;
 dsp_crypthoKey[23] = dsp_Ibmevvpiej;
 dsp_crypthoKey[24] = dsp_FIhXlccMaQ;
 dsp_crypthoKey[25] = dsp_kFvaBsnYmO;
 dsp_crypthoKey[26] = dsp_pVQCZlXoub;
 dsp_crypthoKey[27] = dsp_yZKFXWHZJI;
 dsp_crypthoKey[28] = dsp_QUnlUPDhNQ;
 dsp_crypthoKey[29] = dsp_WdMMFMYDbt;
 dsp_crypthoKey[30] = dsp_FzsqfpnMpW;
 dsp_crypthoKey[31] = dsp_vfQJqLyUTl;
 dsp_crypthoKey[32] = dsp_LQoxDUkByl;
 dsp_crypthoKey[33] = dsp_UdLntQDHDS;
 dsp_crypthoKey[34] = dsp_DYXuHogfjZ;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t OQbzdvqGcTzG = dec_recoveredKey[0];
uint32_t RwbzLhEUhVPX = dec_recoveredKey[1];
uint32_t BhrbKmazccZg = dec_recoveredKey[2];
uint32_t xpNAjmhaJjAv = dec_recoveredKey[3];

		
			/* round 12: */
			s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^  OQbzdvqGcTzG ;
 
			s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^  RwbzLhEUhVPX ;
 
			s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^  BhrbKmazccZg ;
 
			s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^  xpNAjmhaJjAv ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_eUWISWmpZT = 24;
 uint32_t dsp_MiYydDtmrp = 111;
 uint32_t dsp_enMrBnUoOB = 139;
 uint32_t dsp_xSwuBorNEq = 1535;
 uint32_t dsp_HqyFPCjiOA = 195;
 uint32_t dsp_ySOkkqyeEm = 1651;
 uint32_t dsp_FbfcwGrNuV = 244;
 uint32_t dsp_dbmBHbeRkS = 828;
 uint32_t dsp_rJLgUVxsZb = 150;
 uint32_t dsp_FFdKIzrZmL = 1388;
 uint32_t dsp_VqNhRvjVmt = 12;
 uint32_t dsp_OEcALXvipv = 703;
 uint32_t dsp_jUbnFJNWJZ = 111;
 uint32_t dsp_IEpvMhQVdd = 58;
 uint32_t dsp_oSHrssoOAE = 23;
 uint32_t dsp_jKzlYeULaD = 129;
 uint32_t dsp_KIhaeUiVPm = 235;
 uint32_t dsp_YeeGvxZKlA = 308;
 uint32_t dsp_pvkOGiSATT = 233;
 uint32_t dsp_eECmEGgNCV = 1115;
 uint32_t dsp_ZBZdhvBhgM = 193;
 uint32_t dsp_HvhRjNacnT = 1421;
 uint32_t dsp_VsyyEdfKQH = 216;
 uint32_t dsp_FQjETqavxg = 371;
 uint32_t dsp_heBoWLcWNq = 108;
 uint32_t dsp_QJIphmsmWj = 781;
 uint32_t dsp_UBZdgTugoS = 67;
 uint32_t dsp_mvXOKUzMRm = 1197;
 uint32_t dsp_cHVKXdWpqS = 141;
 uint32_t dsp_zkuyoArIHF = 392;
 uint32_t dsp_ATbyHLshxj = 136;
 uint32_t dsp_tzRpkOsgeJ = 779;
 uint32_t dsp_ZDTtbhUtQB = 44;
 uint32_t dsp_ZqvaPdLhkj = 308;
 uint32_t dsp_rDJiTTXmab = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_eUWISWmpZT;
 dsp_crypthoKey[1] = dsp_MiYydDtmrp;
 dsp_crypthoKey[2] = dsp_enMrBnUoOB;
 dsp_crypthoKey[3] = dsp_xSwuBorNEq;
 dsp_crypthoKey[4] = dsp_HqyFPCjiOA;
 dsp_crypthoKey[5] = dsp_ySOkkqyeEm;
 dsp_crypthoKey[6] = dsp_FbfcwGrNuV;
 dsp_crypthoKey[7] = dsp_dbmBHbeRkS;
 dsp_crypthoKey[8] = dsp_rJLgUVxsZb;
 dsp_crypthoKey[9] = dsp_FFdKIzrZmL;
 dsp_crypthoKey[10] = dsp_VqNhRvjVmt;
 dsp_crypthoKey[11] = dsp_OEcALXvipv;
 dsp_crypthoKey[12] = dsp_jUbnFJNWJZ;
 dsp_crypthoKey[13] = dsp_IEpvMhQVdd;
 dsp_crypthoKey[14] = dsp_oSHrssoOAE;
 dsp_crypthoKey[15] = dsp_jKzlYeULaD;
 dsp_crypthoKey[16] = dsp_KIhaeUiVPm;
 dsp_crypthoKey[17] = dsp_YeeGvxZKlA;
 dsp_crypthoKey[18] = dsp_pvkOGiSATT;
 dsp_crypthoKey[19] = dsp_eECmEGgNCV;
 dsp_crypthoKey[20] = dsp_ZBZdhvBhgM;
 dsp_crypthoKey[21] = dsp_HvhRjNacnT;
 dsp_crypthoKey[22] = dsp_VsyyEdfKQH;
 dsp_crypthoKey[23] = dsp_FQjETqavxg;
 dsp_crypthoKey[24] = dsp_heBoWLcWNq;
 dsp_crypthoKey[25] = dsp_QJIphmsmWj;
 dsp_crypthoKey[26] = dsp_UBZdgTugoS;
 dsp_crypthoKey[27] = dsp_mvXOKUzMRm;
 dsp_crypthoKey[28] = dsp_cHVKXdWpqS;
 dsp_crypthoKey[29] = dsp_zkuyoArIHF;
 dsp_crypthoKey[30] = dsp_ATbyHLshxj;
 dsp_crypthoKey[31] = dsp_tzRpkOsgeJ;
 dsp_crypthoKey[32] = dsp_ZDTtbhUtQB;
 dsp_crypthoKey[33] = dsp_ZqvaPdLhkj;
 dsp_crypthoKey[34] = dsp_rDJiTTXmab;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t OZdkaSnLaxVr = dec_recoveredKey[0];
uint32_t bEAUyxgyzcxf = dec_recoveredKey[1];
uint32_t RRMNeNATNDdN = dec_recoveredKey[2];
uint32_t wqzxNvPOZpJy = dec_recoveredKey[3];

			/* round 13: */
			t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^  OZdkaSnLaxVr ;
 
			t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^  bEAUyxgyzcxf ;
 
			t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^  RRMNeNATNDdN ;
 
			t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^  wqzxNvPOZpJy ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_fqXCGQzQxa = 100;
 uint32_t dsp_cSXFNsWdCc = 91;
 uint32_t dsp_tbQhnuSNRY = 173;
 uint32_t dsp_FXoCzVtZMQ = 355;
 uint32_t dsp_aPJYvwqrAT = 26;
 uint32_t dsp_tTUkbiFUVw = 430;
 uint32_t dsp_SBuhdUdxTP = 79;
 uint32_t dsp_oTEXRZtirU = 428;
 uint32_t dsp_bLNWVPeBJa = 241;
 uint32_t dsp_XCBsJFmNcf = 453;
 uint32_t dsp_CrZhoRgIay = 162;
 uint32_t dsp_CbjqYffdGP = 356;
 uint32_t dsp_dEsFWbliOo = 62;
 uint32_t dsp_orFoyTgFBg = 617;
 uint32_t dsp_deinugsAjY = 243;
 uint32_t dsp_pnDISzJeIy = 291;
 uint32_t dsp_sWQXloRrUt = 230;
 uint32_t dsp_xXxFkRMDrV = 629;
 uint32_t dsp_BHjepcEZgm = 82;
 uint32_t dsp_yyjpvuDnLx = 288;
 uint32_t dsp_GivdOGVBjm = 47;
 uint32_t dsp_wLUGQkIukO = 443;
 uint32_t dsp_GImQYIkBVV = 79;
 uint32_t dsp_ZBevFTbAuk = 402;
 uint32_t dsp_NRWHxMSfgc = 199;
 uint32_t dsp_UNLgDJPNlK = 352;
 uint32_t dsp_JlmOGRHIsc = 61;
 uint32_t dsp_TfTPMrBFxI = 568;
 uint32_t dsp_IrvtxZdnMo = 181;
 uint32_t dsp_YwAkkhcSPu = 141;
 uint32_t dsp_UJAOznfbSC = 111;
 uint32_t dsp_JATfUreXER = 199;
 uint32_t dsp_mDoMOyUQrK = 216;
 uint32_t dsp_lmtLaTZgUR = 595;
 uint32_t dsp_IDrCJlUOjz = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_fqXCGQzQxa;
 dsp_crypthoKey[1] = dsp_cSXFNsWdCc;
 dsp_crypthoKey[2] = dsp_tbQhnuSNRY;
 dsp_crypthoKey[3] = dsp_FXoCzVtZMQ;
 dsp_crypthoKey[4] = dsp_aPJYvwqrAT;
 dsp_crypthoKey[5] = dsp_tTUkbiFUVw;
 dsp_crypthoKey[6] = dsp_SBuhdUdxTP;
 dsp_crypthoKey[7] = dsp_oTEXRZtirU;
 dsp_crypthoKey[8] = dsp_bLNWVPeBJa;
 dsp_crypthoKey[9] = dsp_XCBsJFmNcf;
 dsp_crypthoKey[10] = dsp_CrZhoRgIay;
 dsp_crypthoKey[11] = dsp_CbjqYffdGP;
 dsp_crypthoKey[12] = dsp_dEsFWbliOo;
 dsp_crypthoKey[13] = dsp_orFoyTgFBg;
 dsp_crypthoKey[14] = dsp_deinugsAjY;
 dsp_crypthoKey[15] = dsp_pnDISzJeIy;
 dsp_crypthoKey[16] = dsp_sWQXloRrUt;
 dsp_crypthoKey[17] = dsp_xXxFkRMDrV;
 dsp_crypthoKey[18] = dsp_BHjepcEZgm;
 dsp_crypthoKey[19] = dsp_yyjpvuDnLx;
 dsp_crypthoKey[20] = dsp_GivdOGVBjm;
 dsp_crypthoKey[21] = dsp_wLUGQkIukO;
 dsp_crypthoKey[22] = dsp_GImQYIkBVV;
 dsp_crypthoKey[23] = dsp_ZBevFTbAuk;
 dsp_crypthoKey[24] = dsp_NRWHxMSfgc;
 dsp_crypthoKey[25] = dsp_UNLgDJPNlK;
 dsp_crypthoKey[26] = dsp_JlmOGRHIsc;
 dsp_crypthoKey[27] = dsp_TfTPMrBFxI;
 dsp_crypthoKey[28] = dsp_IrvtxZdnMo;
 dsp_crypthoKey[29] = dsp_YwAkkhcSPu;
 dsp_crypthoKey[30] = dsp_UJAOznfbSC;
 dsp_crypthoKey[31] = dsp_JATfUreXER;
 dsp_crypthoKey[32] = dsp_mDoMOyUQrK;
 dsp_crypthoKey[33] = dsp_lmtLaTZgUR;
 dsp_crypthoKey[34] = dsp_IDrCJlUOjz;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t MTWgFXZEdUvM = dec_recoveredKey[0];
uint32_t yNphZjViIBEK = dec_recoveredKey[1];
uint32_t vMAOPiyCbvJG = dec_recoveredKey[2];
uint32_t sJkvDFibtxjs = dec_recoveredKey[3];

		
	
	

	/*
	* apply last round and
	* map cipher state to byte array block:
	*/
	ct0 =
		(Te4[(t0 >> 24) & 0xff] & 0xff000000) ^
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
		 MTWgFXZEdUvM ;
 
	ct1 =
		(Te4[(t1 >> 24) & 0xff] & 0xff000000) ^
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		 yNphZjViIBEK ;
 
	ct2  =
		(Te4[(t2 >> 24) & 0xff] & 0xff000000) ^
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		 vMAOPiyCbvJG ;
 
	ct3 =
		(Te4[(t3 >> 24) & 0xff] & 0xff000000) ^
		(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t2      ) & 0xff] & 0x000000ff) ^
		 sJkvDFibtxjs ;
 
}


	unpackWordBigEndian(ct0, ct, 0);
	unpackWordBigEndian(ct1, ct, 4);
	unpackWordBigEndian(ct2, ct, 8);
	unpackWordBigEndian(ct3, ct, 12);
}

static void decrypt_(const uint8_t *ct, uint8_t *pt, aes_ctx_st *ctx) {
	uint32_t *rdk ;
	uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
	uint32_t pt0, pt1, pt2, pt3;
	uint32_t ct0, ct1, ct2, ct3; 
	/*
	* map byte array block to cipher state
	* and add initial round key:
	*/
	ct0 = packWordBigEndian(ct, 0);
	ct1 = packWordBigEndian(ct, 4);
	ct2 = packWordBigEndian(ct, 8);
	ct3 = packWordBigEndian(ct, 12); 

 uint32_t *dsp_crypthoKey; 
 uint32_t *dsp_restoredKey; 
 
 uint32_t dsp_t1_key_size; 
 uint32_t dsp_my_i;
  uint32_t dsp_my_j;

 dsp_crypthoKey = malloc( 18 * sizeof(uint32_t)); 
 dsp_restoredKey = malloc( 16 * sizeof(uint32_t));
 uint32_t dsp_t1_a ;
 uint32_t dsp_t1_b; 
 uint32_t dsp_t1_key_size_obs; 

 uint32_t dec_my_i; 
 uint32_t dec_my_j; 
 uint32_t dec_recoveredKey[20];
 char rec_key[10];
 char temp[8];
 char form [8];
 uint32_t kdiv;
 uint32_t cdiv; 
uint32_t size_to_decrypt; 
 
 uint32_t dec_temp_k;
 uint32_t dec_key_val;
  uint32_t dec_d;
 uint32_t dec_N;
 uint64_t dec_dtemp; 
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_ZeqAUYiiiS = 159;
 uint32_t dsp_ScjVFKtLQa = 25;
 uint32_t dsp_TqejjPFCPH = 254;
 uint32_t dsp_bOMsoGqxPz = 1003;
 uint32_t dsp_qIBADgkWSb = 217;
 uint32_t dsp_XLsbVBQAeF = 1517;
 uint32_t dsp_ifuVxJBOhq = 207;
 uint32_t dsp_nxYPXCWizO = 1240;
 uint32_t dsp_jwzBxvdoWh = 171;
 uint32_t dsp_UfnoaLXBze = 519;
 uint32_t dsp_SNCRDAtzJS = 50;
 uint32_t dsp_nSoNuMiybe = 307;
 uint32_t dsp_FVkTkkEiLe = 176;
 uint32_t dsp_nDRPuuqOUZ = 294;
 uint32_t dsp_GiSVWnIfLJ = 80;
 uint32_t dsp_krFulPEPXp = 1311;
 uint32_t dsp_UkTMaohqcb = 141;
 uint32_t dsp_qJjjFgxnlj = 115;
 uint32_t dsp_XvACPMrtCp = 119;
 uint32_t dsp_JwzDizRpQU = 162;
 uint32_t dsp_qhDAqjGOxS = 33;
 uint32_t dsp_XunyXckpwM = 1344;
 uint32_t dsp_EfidIqDAGu = 38;
 uint32_t dsp_uXBYySheGE = 1253;
 uint32_t dsp_WDZkbWmllJ = 20;
 uint32_t dsp_YQOgUxxxXd = 1074;
 uint32_t dsp_RsbtqzlyES = 218;
 uint32_t dsp_dBvcLxZYIl = 1635;
 uint32_t dsp_HHbwNVTltQ = 107;
 uint32_t dsp_pliqEzPQXt = 580;
 uint32_t dsp_IaUddGBcEk = 255;
 uint32_t dsp_nmRpIEkBQD = 1001;
 uint32_t dsp_sfOBvtbljZ = 121;
 uint32_t dsp_ERZzVdfwgK = 388;
 uint32_t dsp_GtWxJEcTgS = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_ZeqAUYiiiS;
 dsp_crypthoKey[1] = dsp_ScjVFKtLQa;
 dsp_crypthoKey[2] = dsp_TqejjPFCPH;
 dsp_crypthoKey[3] = dsp_bOMsoGqxPz;
 dsp_crypthoKey[4] = dsp_qIBADgkWSb;
 dsp_crypthoKey[5] = dsp_XLsbVBQAeF;
 dsp_crypthoKey[6] = dsp_ifuVxJBOhq;
 dsp_crypthoKey[7] = dsp_nxYPXCWizO;
 dsp_crypthoKey[8] = dsp_jwzBxvdoWh;
 dsp_crypthoKey[9] = dsp_UfnoaLXBze;
 dsp_crypthoKey[10] = dsp_SNCRDAtzJS;
 dsp_crypthoKey[11] = dsp_nSoNuMiybe;
 dsp_crypthoKey[12] = dsp_FVkTkkEiLe;
 dsp_crypthoKey[13] = dsp_nDRPuuqOUZ;
 dsp_crypthoKey[14] = dsp_GiSVWnIfLJ;
 dsp_crypthoKey[15] = dsp_krFulPEPXp;
 dsp_crypthoKey[16] = dsp_UkTMaohqcb;
 dsp_crypthoKey[17] = dsp_qJjjFgxnlj;
 dsp_crypthoKey[18] = dsp_XvACPMrtCp;
 dsp_crypthoKey[19] = dsp_JwzDizRpQU;
 dsp_crypthoKey[20] = dsp_qhDAqjGOxS;
 dsp_crypthoKey[21] = dsp_XunyXckpwM;
 dsp_crypthoKey[22] = dsp_EfidIqDAGu;
 dsp_crypthoKey[23] = dsp_uXBYySheGE;
 dsp_crypthoKey[24] = dsp_WDZkbWmllJ;
 dsp_crypthoKey[25] = dsp_YQOgUxxxXd;
 dsp_crypthoKey[26] = dsp_RsbtqzlyES;
 dsp_crypthoKey[27] = dsp_dBvcLxZYIl;
 dsp_crypthoKey[28] = dsp_HHbwNVTltQ;
 dsp_crypthoKey[29] = dsp_pliqEzPQXt;
 dsp_crypthoKey[30] = dsp_IaUddGBcEk;
 dsp_crypthoKey[31] = dsp_nmRpIEkBQD;
 dsp_crypthoKey[32] = dsp_sfOBvtbljZ;
 dsp_crypthoKey[33] = dsp_ERZzVdfwgK;
 dsp_crypthoKey[34] = dsp_GtWxJEcTgS;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t bjGbIBfOYlzF = dec_recoveredKey[0];
uint32_t FvdoafihYFHW = dec_recoveredKey[1];
uint32_t RIqxLUmNdSOM = dec_recoveredKey[2];
uint32_t uTBsfaXKvaYw = dec_recoveredKey[3];



	s0 = ct0 ^  bjGbIBfOYlzF ;
 
	s1 = ct1 ^  FvdoafihYFHW ;
 
	s2 = ct2 ^  RIqxLUmNdSOM ;
 
	s3 = ct3 ^  uTBsfaXKvaYw ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_cmfuoLGBdW = 189;
 uint32_t dsp_HkYhlCZsfP = 55;
 uint32_t dsp_ifGYCCUCEC = 6;
 uint32_t dsp_OHPUbdFIFJ = 915;
 uint32_t dsp_EnTDvffvxl = 225;
 uint32_t dsp_lGqRETuyvY = 124;
 uint32_t dsp_bkFQfHULqA = 7;
 uint32_t dsp_uUNoxjuCER = 785;
 uint32_t dsp_OPyeGdXbCt = 59;
 uint32_t dsp_ZDEFuJnovD = 874;
 uint32_t dsp_PPyDdWMxzr = 90;
 uint32_t dsp_pngOrNRpPt = 1302;
 uint32_t dsp_JOXourXHGs = 28;
 uint32_t dsp_lviKZmGLKf = 547;
 uint32_t dsp_dZsjOKXGZM = 11;
 uint32_t dsp_ZJBXXWoVDV = 1084;
 uint32_t dsp_oPrwzqIfcs = 5;
 uint32_t dsp_lfsDphnnNn = 911;
 uint32_t dsp_aMWBJUxYPb = 217;
 uint32_t dsp_TdRkArBiwD = 57;
 uint32_t dsp_BHJUlYbylO = 146;
 uint32_t dsp_LlBINlCljr = 841;
 uint32_t dsp_ndveoVvPeS = 209;
 uint32_t dsp_tGAcALaCjm = 628;
 uint32_t dsp_qVySEldgxm = 208;
 uint32_t dsp_yKqUOEQkuU = 190;
 uint32_t dsp_dNBDQboREy = 110;
 uint32_t dsp_dUuCMYOQfl = 772;
 uint32_t dsp_cEVtyKXoVs = 236;
 uint32_t dsp_jYgKBWMQOq = 1236;
 uint32_t dsp_pRlJuYIiOO = 7;
 uint32_t dsp_tRspkRaigV = 911;
 uint32_t dsp_ApUGavDNmr = 58;
 uint32_t dsp_dBjplDnULb = 1139;
 uint32_t dsp_IfSbucSvkY = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_cmfuoLGBdW;
 dsp_crypthoKey[1] = dsp_HkYhlCZsfP;
 dsp_crypthoKey[2] = dsp_ifGYCCUCEC;
 dsp_crypthoKey[3] = dsp_OHPUbdFIFJ;
 dsp_crypthoKey[4] = dsp_EnTDvffvxl;
 dsp_crypthoKey[5] = dsp_lGqRETuyvY;
 dsp_crypthoKey[6] = dsp_bkFQfHULqA;
 dsp_crypthoKey[7] = dsp_uUNoxjuCER;
 dsp_crypthoKey[8] = dsp_OPyeGdXbCt;
 dsp_crypthoKey[9] = dsp_ZDEFuJnovD;
 dsp_crypthoKey[10] = dsp_PPyDdWMxzr;
 dsp_crypthoKey[11] = dsp_pngOrNRpPt;
 dsp_crypthoKey[12] = dsp_JOXourXHGs;
 dsp_crypthoKey[13] = dsp_lviKZmGLKf;
 dsp_crypthoKey[14] = dsp_dZsjOKXGZM;
 dsp_crypthoKey[15] = dsp_ZJBXXWoVDV;
 dsp_crypthoKey[16] = dsp_oPrwzqIfcs;
 dsp_crypthoKey[17] = dsp_lfsDphnnNn;
 dsp_crypthoKey[18] = dsp_aMWBJUxYPb;
 dsp_crypthoKey[19] = dsp_TdRkArBiwD;
 dsp_crypthoKey[20] = dsp_BHJUlYbylO;
 dsp_crypthoKey[21] = dsp_LlBINlCljr;
 dsp_crypthoKey[22] = dsp_ndveoVvPeS;
 dsp_crypthoKey[23] = dsp_tGAcALaCjm;
 dsp_crypthoKey[24] = dsp_qVySEldgxm;
 dsp_crypthoKey[25] = dsp_yKqUOEQkuU;
 dsp_crypthoKey[26] = dsp_dNBDQboREy;
 dsp_crypthoKey[27] = dsp_dUuCMYOQfl;
 dsp_crypthoKey[28] = dsp_cEVtyKXoVs;
 dsp_crypthoKey[29] = dsp_jYgKBWMQOq;
 dsp_crypthoKey[30] = dsp_pRlJuYIiOO;
 dsp_crypthoKey[31] = dsp_tRspkRaigV;
 dsp_crypthoKey[32] = dsp_ApUGavDNmr;
 dsp_crypthoKey[33] = dsp_dBjplDnULb;
 dsp_crypthoKey[34] = dsp_IfSbucSvkY;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t nfuwuGaIBMJj = dec_recoveredKey[0];
uint32_t RBlmEdHPcYAq = dec_recoveredKey[1];
uint32_t jTFQOHJcNeyi = dec_recoveredKey[2];
uint32_t KzQllzvcbGoF = dec_recoveredKey[3];


	/* round 1: */
	t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  nfuwuGaIBMJj ;
 
	t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  RBlmEdHPcYAq ;
 
	t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  jTFQOHJcNeyi ;
 
	t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  KzQllzvcbGoF ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_gcmOXQeBwg = 232;
 uint32_t dsp_jArCeshTSh = 234;
 uint32_t dsp_KuOQBfTdjR = 13;
 uint32_t dsp_ApUNdRDhta = 435;
 uint32_t dsp_oDAGgFYnyR = 201;
 uint32_t dsp_vjljaMpTPy = 1153;
 uint32_t dsp_LqOFeRxIZR = 230;
 uint32_t dsp_IoujUBOTOn = 1603;
 uint32_t dsp_KkxVuxIJrx = 76;
 uint32_t dsp_icOWITOgBO = 2073;
 uint32_t dsp_YjctsXUhQJ = 156;
 uint32_t dsp_uATSwnpeXH = 1921;
 uint32_t dsp_CgJqdsjRzL = 168;
 uint32_t dsp_GxUIRmGLuw = 277;
 uint32_t dsp_uPWoHsCWwz = 53;
 uint32_t dsp_DZGnpJGzAg = 435;
 uint32_t dsp_kgEfPvrvgM = 146;
 uint32_t dsp_SBBOPihsfE = 101;
 uint32_t dsp_RIDxWTgDsH = 151;
 uint32_t dsp_JDOnIEIaaP = 3;
 uint32_t dsp_MSqnHgwOyB = 129;
 uint32_t dsp_tqjWOgQUJj = 1022;
 uint32_t dsp_CsMrFvVowV = 212;
 uint32_t dsp_diNuwuASjZ = 1917;
 uint32_t dsp_uDpDzdKqYt = 162;
 uint32_t dsp_zBMmSsHOGd = 326;
 uint32_t dsp_JKmxeJSFCc = 34;
 uint32_t dsp_EWFUAfYkvX = 174;
 uint32_t dsp_EUzqgrJOfp = 13;
 uint32_t dsp_SPafmeOfJq = 1810;
 uint32_t dsp_honMjNRhYn = 16;
 uint32_t dsp_fChEToWCdc = 236;
 uint32_t dsp_SVRSaeWPjG = 116;
 uint32_t dsp_frVseegVme = 435;
 uint32_t dsp_jrHrVAFRcJ = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_gcmOXQeBwg;
 dsp_crypthoKey[1] = dsp_jArCeshTSh;
 dsp_crypthoKey[2] = dsp_KuOQBfTdjR;
 dsp_crypthoKey[3] = dsp_ApUNdRDhta;
 dsp_crypthoKey[4] = dsp_oDAGgFYnyR;
 dsp_crypthoKey[5] = dsp_vjljaMpTPy;
 dsp_crypthoKey[6] = dsp_LqOFeRxIZR;
 dsp_crypthoKey[7] = dsp_IoujUBOTOn;
 dsp_crypthoKey[8] = dsp_KkxVuxIJrx;
 dsp_crypthoKey[9] = dsp_icOWITOgBO;
 dsp_crypthoKey[10] = dsp_YjctsXUhQJ;
 dsp_crypthoKey[11] = dsp_uATSwnpeXH;
 dsp_crypthoKey[12] = dsp_CgJqdsjRzL;
 dsp_crypthoKey[13] = dsp_GxUIRmGLuw;
 dsp_crypthoKey[14] = dsp_uPWoHsCWwz;
 dsp_crypthoKey[15] = dsp_DZGnpJGzAg;
 dsp_crypthoKey[16] = dsp_kgEfPvrvgM;
 dsp_crypthoKey[17] = dsp_SBBOPihsfE;
 dsp_crypthoKey[18] = dsp_RIDxWTgDsH;
 dsp_crypthoKey[19] = dsp_JDOnIEIaaP;
 dsp_crypthoKey[20] = dsp_MSqnHgwOyB;
 dsp_crypthoKey[21] = dsp_tqjWOgQUJj;
 dsp_crypthoKey[22] = dsp_CsMrFvVowV;
 dsp_crypthoKey[23] = dsp_diNuwuASjZ;
 dsp_crypthoKey[24] = dsp_uDpDzdKqYt;
 dsp_crypthoKey[25] = dsp_zBMmSsHOGd;
 dsp_crypthoKey[26] = dsp_JKmxeJSFCc;
 dsp_crypthoKey[27] = dsp_EWFUAfYkvX;
 dsp_crypthoKey[28] = dsp_EUzqgrJOfp;
 dsp_crypthoKey[29] = dsp_SPafmeOfJq;
 dsp_crypthoKey[30] = dsp_honMjNRhYn;
 dsp_crypthoKey[31] = dsp_fChEToWCdc;
 dsp_crypthoKey[32] = dsp_SVRSaeWPjG;
 dsp_crypthoKey[33] = dsp_frVseegVme;
 dsp_crypthoKey[34] = dsp_jrHrVAFRcJ;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t qAqlTvqZqCdA = dec_recoveredKey[0];
uint32_t TKRPlxHogBjK = dec_recoveredKey[1];
uint32_t mWqcFKcWktie = dec_recoveredKey[2];
uint32_t OydfahFTSwJd = dec_recoveredKey[3];

	/* round 2: */
	s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^  qAqlTvqZqCdA ;
 
	s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^  TKRPlxHogBjK ;
 
	s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^  mWqcFKcWktie ;
 
	s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^  OydfahFTSwJd ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_fwxgDzSNzP = 216;
 uint32_t dsp_qGQIlVfRhi = 131;
 uint32_t dsp_rlHAtbZSvr = 183;
 uint32_t dsp_SANpGqPzeo = 445;
 uint32_t dsp_ovVfdhbjYi = 112;
 uint32_t dsp_rptYQNaPFv = 331;
 uint32_t dsp_gyVTOCkEbp = 36;
 uint32_t dsp_TqKOvNVxWU = 643;
 uint32_t dsp_FokZnaMnQs = 187;
 uint32_t dsp_IWREQFgbjh = 75;
 uint32_t dsp_qcxbRTPNqM = 252;
 uint32_t dsp_HWaSVnSIAI = 297;
 uint32_t dsp_aiFRMwxTyG = 144;
 uint32_t dsp_aPJyQBrFoI = 410;
 uint32_t dsp_rVErNAEGie = 5;
 uint32_t dsp_pjnUaaryTP = 608;
 uint32_t dsp_fUEOsupKZE = 154;
 uint32_t dsp_srzWInxnTF = 569;
 uint32_t dsp_siOGdPHunB = 113;
 uint32_t dsp_jsvOhOixyi = 9;
 uint32_t dsp_bQzBNiPkwJ = 58;
 uint32_t dsp_QOSFuVvbqI = 714;
 uint32_t dsp_CAbYojMxGk = 126;
 uint32_t dsp_FIbfkPoZZK = 603;
 uint32_t dsp_IQzAvTvQVM = 125;
 uint32_t dsp_zymAxAKjYr = 436;
 uint32_t dsp_uEZwKjlYil = 38;
 uint32_t dsp_JRbirwcNnX = 599;
 uint32_t dsp_zMwMnTnXdl = 125;
 uint32_t dsp_oxPoTzyfyG = 65;
 uint32_t dsp_qiyrqPOtDb = 97;
 uint32_t dsp_qcNNObGcYJ = 574;
 uint32_t dsp_nnhdBbDZgb = 0;
 uint32_t dsp_GwjeOAUCTx = 744;
 uint32_t dsp_DkArXpsErr = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_fwxgDzSNzP;
 dsp_crypthoKey[1] = dsp_qGQIlVfRhi;
 dsp_crypthoKey[2] = dsp_rlHAtbZSvr;
 dsp_crypthoKey[3] = dsp_SANpGqPzeo;
 dsp_crypthoKey[4] = dsp_ovVfdhbjYi;
 dsp_crypthoKey[5] = dsp_rptYQNaPFv;
 dsp_crypthoKey[6] = dsp_gyVTOCkEbp;
 dsp_crypthoKey[7] = dsp_TqKOvNVxWU;
 dsp_crypthoKey[8] = dsp_FokZnaMnQs;
 dsp_crypthoKey[9] = dsp_IWREQFgbjh;
 dsp_crypthoKey[10] = dsp_qcxbRTPNqM;
 dsp_crypthoKey[11] = dsp_HWaSVnSIAI;
 dsp_crypthoKey[12] = dsp_aiFRMwxTyG;
 dsp_crypthoKey[13] = dsp_aPJyQBrFoI;
 dsp_crypthoKey[14] = dsp_rVErNAEGie;
 dsp_crypthoKey[15] = dsp_pjnUaaryTP;
 dsp_crypthoKey[16] = dsp_fUEOsupKZE;
 dsp_crypthoKey[17] = dsp_srzWInxnTF;
 dsp_crypthoKey[18] = dsp_siOGdPHunB;
 dsp_crypthoKey[19] = dsp_jsvOhOixyi;
 dsp_crypthoKey[20] = dsp_bQzBNiPkwJ;
 dsp_crypthoKey[21] = dsp_QOSFuVvbqI;
 dsp_crypthoKey[22] = dsp_CAbYojMxGk;
 dsp_crypthoKey[23] = dsp_FIbfkPoZZK;
 dsp_crypthoKey[24] = dsp_IQzAvTvQVM;
 dsp_crypthoKey[25] = dsp_zymAxAKjYr;
 dsp_crypthoKey[26] = dsp_uEZwKjlYil;
 dsp_crypthoKey[27] = dsp_JRbirwcNnX;
 dsp_crypthoKey[28] = dsp_zMwMnTnXdl;
 dsp_crypthoKey[29] = dsp_oxPoTzyfyG;
 dsp_crypthoKey[30] = dsp_qiyrqPOtDb;
 dsp_crypthoKey[31] = dsp_qcNNObGcYJ;
 dsp_crypthoKey[32] = dsp_nnhdBbDZgb;
 dsp_crypthoKey[33] = dsp_GwjeOAUCTx;
 dsp_crypthoKey[34] = dsp_DkArXpsErr;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t mNYwSMXMpQkS = dec_recoveredKey[0];
uint32_t bKkYZCDqUQVy = dec_recoveredKey[1];
uint32_t lDFHOLjayixq = dec_recoveredKey[2];
uint32_t VudklndmXnlX = dec_recoveredKey[3];

	/* round 3: */
	t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  mNYwSMXMpQkS ;
 
	t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  bKkYZCDqUQVy ;
 
	t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  lDFHOLjayixq ;
 
	t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  VudklndmXnlX ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_ZnMOLmouOn = 154;
 uint32_t dsp_lMDYfWVJDW = 46;
 uint32_t dsp_AhlCKrtAhP = 46;
 uint32_t dsp_zhcmWOzkin = 1701;
 uint32_t dsp_ytabrfYnPB = 190;
 uint32_t dsp_kqJwTtNmTV = 1957;
 uint32_t dsp_ctdeFZTejb = 120;
 uint32_t dsp_sIvsJNyHbo = 856;
 uint32_t dsp_jlESHxlvKf = 129;
 uint32_t dsp_qMzuQetKjD = 637;
 uint32_t dsp_LBlhUVVsDW = 134;
 uint32_t dsp_GMhlFPIRkt = 1142;
 uint32_t dsp_WBfwVWApGK = 212;
 uint32_t dsp_SsmezgZuzD = 1082;
 uint32_t dsp_rgpyrVnaMy = 77;
 uint32_t dsp_tJazfVvGlb = 502;
 uint32_t dsp_retDiTKiok = 93;
 uint32_t dsp_LFqbeIWsJJ = 1926;
 uint32_t dsp_QdsQCyMXeY = 243;
 uint32_t dsp_ZvctZknKsB = 2158;
 uint32_t dsp_VehmflUcEE = 161;
 uint32_t dsp_LvIdlkBYiG = 1596;
 uint32_t dsp_XibZBbjOMC = 209;
 uint32_t dsp_qHGyTMKOOo = 199;
 uint32_t dsp_szJaDVleUt = 74;
 uint32_t dsp_KRBMRdObSA = 989;
 uint32_t dsp_DihkHaXrOL = 138;
 uint32_t dsp_GhlpiOltTf = 2167;
 uint32_t dsp_NEXpqOsfPk = 210;
 uint32_t dsp_FttNEaOBsD = 622;
 uint32_t dsp_nYKyoSnzmg = 208;
 uint32_t dsp_FZKCpbrIgg = 2023;
 uint32_t dsp_TMAnzennGG = 254;
 uint32_t dsp_QTEBsSuFsG = 1567;
 uint32_t dsp_LXGwzWxQED = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_ZnMOLmouOn;
 dsp_crypthoKey[1] = dsp_lMDYfWVJDW;
 dsp_crypthoKey[2] = dsp_AhlCKrtAhP;
 dsp_crypthoKey[3] = dsp_zhcmWOzkin;
 dsp_crypthoKey[4] = dsp_ytabrfYnPB;
 dsp_crypthoKey[5] = dsp_kqJwTtNmTV;
 dsp_crypthoKey[6] = dsp_ctdeFZTejb;
 dsp_crypthoKey[7] = dsp_sIvsJNyHbo;
 dsp_crypthoKey[8] = dsp_jlESHxlvKf;
 dsp_crypthoKey[9] = dsp_qMzuQetKjD;
 dsp_crypthoKey[10] = dsp_LBlhUVVsDW;
 dsp_crypthoKey[11] = dsp_GMhlFPIRkt;
 dsp_crypthoKey[12] = dsp_WBfwVWApGK;
 dsp_crypthoKey[13] = dsp_SsmezgZuzD;
 dsp_crypthoKey[14] = dsp_rgpyrVnaMy;
 dsp_crypthoKey[15] = dsp_tJazfVvGlb;
 dsp_crypthoKey[16] = dsp_retDiTKiok;
 dsp_crypthoKey[17] = dsp_LFqbeIWsJJ;
 dsp_crypthoKey[18] = dsp_QdsQCyMXeY;
 dsp_crypthoKey[19] = dsp_ZvctZknKsB;
 dsp_crypthoKey[20] = dsp_VehmflUcEE;
 dsp_crypthoKey[21] = dsp_LvIdlkBYiG;
 dsp_crypthoKey[22] = dsp_XibZBbjOMC;
 dsp_crypthoKey[23] = dsp_qHGyTMKOOo;
 dsp_crypthoKey[24] = dsp_szJaDVleUt;
 dsp_crypthoKey[25] = dsp_KRBMRdObSA;
 dsp_crypthoKey[26] = dsp_DihkHaXrOL;
 dsp_crypthoKey[27] = dsp_GhlpiOltTf;
 dsp_crypthoKey[28] = dsp_NEXpqOsfPk;
 dsp_crypthoKey[29] = dsp_FttNEaOBsD;
 dsp_crypthoKey[30] = dsp_nYKyoSnzmg;
 dsp_crypthoKey[31] = dsp_FZKCpbrIgg;
 dsp_crypthoKey[32] = dsp_TMAnzennGG;
 dsp_crypthoKey[33] = dsp_QTEBsSuFsG;
 dsp_crypthoKey[34] = dsp_LXGwzWxQED;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t ETcjvvcPbuvN = dec_recoveredKey[0];
uint32_t rcjRYGHCkFaA = dec_recoveredKey[1];
uint32_t cKpFJsOolRyG = dec_recoveredKey[2];
uint32_t mAwnURamUjdS = dec_recoveredKey[3];

	/* round 4: */
	s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^  ETcjvvcPbuvN ;
 
	s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^  rcjRYGHCkFaA ;
 
	s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^  cKpFJsOolRyG ;
 
	s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^  mAwnURamUjdS ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_GJawIREwWY = 81;
 uint32_t dsp_azYRCvVAKa = 108;
 uint32_t dsp_LToaVtZtzq = 131;
 uint32_t dsp_nfZoBIfffc = 31;
 uint32_t dsp_dfBcXdyTEi = 34;
 uint32_t dsp_TqciqXBqqa = 772;
 uint32_t dsp_GEgGSHpYNu = 251;
 uint32_t dsp_aRABUxFsqk = 645;
 uint32_t dsp_BkADsRAThR = 39;
 uint32_t dsp_UOvbuoJJmw = 299;
 uint32_t dsp_emoEOictBt = 23;
 uint32_t dsp_EcDfGVXhPe = 1130;
 uint32_t dsp_YKTuLoJuYV = 149;
 uint32_t dsp_RcifHXoKrQ = 541;
 uint32_t dsp_dVSGazCXGs = 3;
 uint32_t dsp_cEcWZOkIji = 1140;
 uint32_t dsp_EakNgSKvCb = 16;
 uint32_t dsp_lFWemXDPVj = 375;
 uint32_t dsp_hYOkUOYewi = 20;
 uint32_t dsp_nbiyOpqyKS = 349;
 uint32_t dsp_zVywZLtDBp = 72;
 uint32_t dsp_MInBThpSmL = 19;
 uint32_t dsp_azNjXByoZi = 52;
 uint32_t dsp_hzeGVerpHT = 443;
 uint32_t dsp_EuBSVvZknm = 71;
 uint32_t dsp_WnMJwKlVYl = 1034;
 uint32_t dsp_efKiMGndWV = 10;
 uint32_t dsp_XApyslUsvh = 1510;
 uint32_t dsp_FsvrbSbnNa = 254;
 uint32_t dsp_yRgiaSPoWL = 1140;
 uint32_t dsp_jTmysFJmYf = 27;
 uint32_t dsp_uDxPVzIXMv = 842;
 uint32_t dsp_XknetoWjCT = 226;
 uint32_t dsp_ULNhkgMTsK = 814;
 uint32_t dsp_ZNnxCjWkgJ = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_GJawIREwWY;
 dsp_crypthoKey[1] = dsp_azYRCvVAKa;
 dsp_crypthoKey[2] = dsp_LToaVtZtzq;
 dsp_crypthoKey[3] = dsp_nfZoBIfffc;
 dsp_crypthoKey[4] = dsp_dfBcXdyTEi;
 dsp_crypthoKey[5] = dsp_TqciqXBqqa;
 dsp_crypthoKey[6] = dsp_GEgGSHpYNu;
 dsp_crypthoKey[7] = dsp_aRABUxFsqk;
 dsp_crypthoKey[8] = dsp_BkADsRAThR;
 dsp_crypthoKey[9] = dsp_UOvbuoJJmw;
 dsp_crypthoKey[10] = dsp_emoEOictBt;
 dsp_crypthoKey[11] = dsp_EcDfGVXhPe;
 dsp_crypthoKey[12] = dsp_YKTuLoJuYV;
 dsp_crypthoKey[13] = dsp_RcifHXoKrQ;
 dsp_crypthoKey[14] = dsp_dVSGazCXGs;
 dsp_crypthoKey[15] = dsp_cEcWZOkIji;
 dsp_crypthoKey[16] = dsp_EakNgSKvCb;
 dsp_crypthoKey[17] = dsp_lFWemXDPVj;
 dsp_crypthoKey[18] = dsp_hYOkUOYewi;
 dsp_crypthoKey[19] = dsp_nbiyOpqyKS;
 dsp_crypthoKey[20] = dsp_zVywZLtDBp;
 dsp_crypthoKey[21] = dsp_MInBThpSmL;
 dsp_crypthoKey[22] = dsp_azNjXByoZi;
 dsp_crypthoKey[23] = dsp_hzeGVerpHT;
 dsp_crypthoKey[24] = dsp_EuBSVvZknm;
 dsp_crypthoKey[25] = dsp_WnMJwKlVYl;
 dsp_crypthoKey[26] = dsp_efKiMGndWV;
 dsp_crypthoKey[27] = dsp_XApyslUsvh;
 dsp_crypthoKey[28] = dsp_FsvrbSbnNa;
 dsp_crypthoKey[29] = dsp_yRgiaSPoWL;
 dsp_crypthoKey[30] = dsp_jTmysFJmYf;
 dsp_crypthoKey[31] = dsp_uDxPVzIXMv;
 dsp_crypthoKey[32] = dsp_XknetoWjCT;
 dsp_crypthoKey[33] = dsp_ULNhkgMTsK;
 dsp_crypthoKey[34] = dsp_ZNnxCjWkgJ;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t YrvMyFSkzlVz = dec_recoveredKey[0];
uint32_t YjWBsTMyCsCw = dec_recoveredKey[1];
uint32_t mKJuQgfPxABV = dec_recoveredKey[2];
uint32_t gtgGFbgDkceD = dec_recoveredKey[3];

	/* round 5: */
	t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  YrvMyFSkzlVz ;
 
	t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  YjWBsTMyCsCw ;
 
	t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  mKJuQgfPxABV ;
 
	t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  gtgGFbgDkceD ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_IyUmpZXmTf = 46;
 uint32_t dsp_JpjnetxzFO = 148;
 uint32_t dsp_xcizcxtdlw = 229;
 uint32_t dsp_JUVEglDexx = 85;
 uint32_t dsp_jgMstRMRrr = 73;
 uint32_t dsp_GOuOowmHAy = 151;
 uint32_t dsp_djsZNzkrDH = 211;
 uint32_t dsp_OMNBfhtRZK = 0;
 uint32_t dsp_jGzDvNaHvB = 180;
 uint32_t dsp_gzLyyzYIQB = 25;
 uint32_t dsp_qFnehtmAkl = 227;
 uint32_t dsp_luRKYmyZUU = 243;
 uint32_t dsp_AatlzSKxBA = 113;
 uint32_t dsp_YSgmWoGiOR = 23;
 uint32_t dsp_tallLjykjs = 19;
 uint32_t dsp_eJtyUSrEqS = 205;
 uint32_t dsp_fpKmCHAiPp = 204;
 uint32_t dsp_ZjpkvbuTlD = 88;
 uint32_t dsp_lqnFOhyfMO = 52;
 uint32_t dsp_YSeIeGqFOf = 25;
 uint32_t dsp_UOpkZKluDx = 59;
 uint32_t dsp_YPNluCsTHf = 235;
 uint32_t dsp_HFXMocsEHh = 245;
 uint32_t dsp_KCWZMVKYpo = 197;
 uint32_t dsp_wndkyyMRrt = 96;
 uint32_t dsp_XZZVLoXeSF = 261;
 uint32_t dsp_mDhiDUdnTt = 255;
 uint32_t dsp_BqGFAfdmWv = 61;
 uint32_t dsp_GUvFPhTNmM = 223;
 uint32_t dsp_sypAGSvKfp = 121;
 uint32_t dsp_dHFKmfPqsM = 195;
 uint32_t dsp_MYGhDvpwjB = 82;
 uint32_t dsp_jBZycGrxrx = 155;
 uint32_t dsp_NuesfryUHQ = 114;
 uint32_t dsp_GtOnBsJQPS = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_IyUmpZXmTf;
 dsp_crypthoKey[1] = dsp_JpjnetxzFO;
 dsp_crypthoKey[2] = dsp_xcizcxtdlw;
 dsp_crypthoKey[3] = dsp_JUVEglDexx;
 dsp_crypthoKey[4] = dsp_jgMstRMRrr;
 dsp_crypthoKey[5] = dsp_GOuOowmHAy;
 dsp_crypthoKey[6] = dsp_djsZNzkrDH;
 dsp_crypthoKey[7] = dsp_OMNBfhtRZK;
 dsp_crypthoKey[8] = dsp_jGzDvNaHvB;
 dsp_crypthoKey[9] = dsp_gzLyyzYIQB;
 dsp_crypthoKey[10] = dsp_qFnehtmAkl;
 dsp_crypthoKey[11] = dsp_luRKYmyZUU;
 dsp_crypthoKey[12] = dsp_AatlzSKxBA;
 dsp_crypthoKey[13] = dsp_YSgmWoGiOR;
 dsp_crypthoKey[14] = dsp_tallLjykjs;
 dsp_crypthoKey[15] = dsp_eJtyUSrEqS;
 dsp_crypthoKey[16] = dsp_fpKmCHAiPp;
 dsp_crypthoKey[17] = dsp_ZjpkvbuTlD;
 dsp_crypthoKey[18] = dsp_lqnFOhyfMO;
 dsp_crypthoKey[19] = dsp_YSeIeGqFOf;
 dsp_crypthoKey[20] = dsp_UOpkZKluDx;
 dsp_crypthoKey[21] = dsp_YPNluCsTHf;
 dsp_crypthoKey[22] = dsp_HFXMocsEHh;
 dsp_crypthoKey[23] = dsp_KCWZMVKYpo;
 dsp_crypthoKey[24] = dsp_wndkyyMRrt;
 dsp_crypthoKey[25] = dsp_XZZVLoXeSF;
 dsp_crypthoKey[26] = dsp_mDhiDUdnTt;
 dsp_crypthoKey[27] = dsp_BqGFAfdmWv;
 dsp_crypthoKey[28] = dsp_GUvFPhTNmM;
 dsp_crypthoKey[29] = dsp_sypAGSvKfp;
 dsp_crypthoKey[30] = dsp_dHFKmfPqsM;
 dsp_crypthoKey[31] = dsp_MYGhDvpwjB;
 dsp_crypthoKey[32] = dsp_jBZycGrxrx;
 dsp_crypthoKey[33] = dsp_NuesfryUHQ;
 dsp_crypthoKey[34] = dsp_GtOnBsJQPS;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t kIKpaPGzKopr = dec_recoveredKey[0];
uint32_t IeEjwoalhskB = dec_recoveredKey[1];
uint32_t JGYIuTYFBIUC = dec_recoveredKey[2];
uint32_t yBbjPrAxvfHS = dec_recoveredKey[3];

	/* round 6: */
	s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^  kIKpaPGzKopr ;
 
	s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^  IeEjwoalhskB ;
 
	s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^  JGYIuTYFBIUC ;
 
	s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^  yBbjPrAxvfHS ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_lDRmVghlbD = 254;
 uint32_t dsp_kQBIiBqpSx = 69;
 uint32_t dsp_UELgisaQBU = 13;
 uint32_t dsp_NMxEZtLgEM = 1602;
 uint32_t dsp_KPDmyLNOaF = 230;
 uint32_t dsp_mUjXbsqcjR = 1462;
 uint32_t dsp_WWEuBDNmKs = 88;
 uint32_t dsp_YuhBGGnuun = 1020;
 uint32_t dsp_ZGijEkBUmL = 229;
 uint32_t dsp_MjIqDjTrvD = 1107;
 uint32_t dsp_JuYRVExjYR = 230;
 uint32_t dsp_wYyFicPKXc = 1857;
 uint32_t dsp_vJldZPmTgI = 252;
 uint32_t dsp_wQcvHYZehY = 597;
 uint32_t dsp_WEXujfxZQu = 247;
 uint32_t dsp_blenpdcCWj = 1454;
 uint32_t dsp_ltZoOHmOLu = 85;
 uint32_t dsp_NIZLcjRAiH = 1855;
 uint32_t dsp_UkTYxicALY = 163;
 uint32_t dsp_KWsJkhrxVc = 864;
 uint32_t dsp_SJLRuNalnj = 81;
 uint32_t dsp_SitMhRVjrG = 1145;
 uint32_t dsp_ibDALNHclD = 152;
 uint32_t dsp_fdmQVGEVSS = 1891;
 uint32_t dsp_eKaywhpsrH = 65;
 uint32_t dsp_YzJBZupHxB = 551;
 uint32_t dsp_lDExtAeYvW = 149;
 uint32_t dsp_QAHQYeYowp = 833;
 uint32_t dsp_VuOEWOZmww = 226;
 uint32_t dsp_NHZsftSjro = 654;
 uint32_t dsp_fhOMYNQXbn = 42;
 uint32_t dsp_nXHbBEQAQn = 844;
 uint32_t dsp_XEVWXaqQjH = 238;
 uint32_t dsp_epPTcOGTMI = 69;
 uint32_t dsp_gZFObhsRHj = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_lDRmVghlbD;
 dsp_crypthoKey[1] = dsp_kQBIiBqpSx;
 dsp_crypthoKey[2] = dsp_UELgisaQBU;
 dsp_crypthoKey[3] = dsp_NMxEZtLgEM;
 dsp_crypthoKey[4] = dsp_KPDmyLNOaF;
 dsp_crypthoKey[5] = dsp_mUjXbsqcjR;
 dsp_crypthoKey[6] = dsp_WWEuBDNmKs;
 dsp_crypthoKey[7] = dsp_YuhBGGnuun;
 dsp_crypthoKey[8] = dsp_ZGijEkBUmL;
 dsp_crypthoKey[9] = dsp_MjIqDjTrvD;
 dsp_crypthoKey[10] = dsp_JuYRVExjYR;
 dsp_crypthoKey[11] = dsp_wYyFicPKXc;
 dsp_crypthoKey[12] = dsp_vJldZPmTgI;
 dsp_crypthoKey[13] = dsp_wQcvHYZehY;
 dsp_crypthoKey[14] = dsp_WEXujfxZQu;
 dsp_crypthoKey[15] = dsp_blenpdcCWj;
 dsp_crypthoKey[16] = dsp_ltZoOHmOLu;
 dsp_crypthoKey[17] = dsp_NIZLcjRAiH;
 dsp_crypthoKey[18] = dsp_UkTYxicALY;
 dsp_crypthoKey[19] = dsp_KWsJkhrxVc;
 dsp_crypthoKey[20] = dsp_SJLRuNalnj;
 dsp_crypthoKey[21] = dsp_SitMhRVjrG;
 dsp_crypthoKey[22] = dsp_ibDALNHclD;
 dsp_crypthoKey[23] = dsp_fdmQVGEVSS;
 dsp_crypthoKey[24] = dsp_eKaywhpsrH;
 dsp_crypthoKey[25] = dsp_YzJBZupHxB;
 dsp_crypthoKey[26] = dsp_lDExtAeYvW;
 dsp_crypthoKey[27] = dsp_QAHQYeYowp;
 dsp_crypthoKey[28] = dsp_VuOEWOZmww;
 dsp_crypthoKey[29] = dsp_NHZsftSjro;
 dsp_crypthoKey[30] = dsp_fhOMYNQXbn;
 dsp_crypthoKey[31] = dsp_nXHbBEQAQn;
 dsp_crypthoKey[32] = dsp_XEVWXaqQjH;
 dsp_crypthoKey[33] = dsp_epPTcOGTMI;
 dsp_crypthoKey[34] = dsp_gZFObhsRHj;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t zFzpyCefwQNC = dec_recoveredKey[0];
uint32_t PtqQAJIiSNNG = dec_recoveredKey[1];
uint32_t NpsOgTYGzyWY = dec_recoveredKey[2];
uint32_t aadwQRZFkqwL = dec_recoveredKey[3];

	/* round 7: */
	t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  zFzpyCefwQNC ;
 
	t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  PtqQAJIiSNNG ;
 
	t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  NpsOgTYGzyWY ;
 
	t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  aadwQRZFkqwL ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_WZuOswzKfK = 215;
 uint32_t dsp_AKTrqfGMjT = 159;
 uint32_t dsp_OxylwbOpyi = 126;
 uint32_t dsp_OuhijzFIkL = 480;
 uint32_t dsp_sKwmcNrIzA = 233;
 uint32_t dsp_CnYazvcnKB = 453;
 uint32_t dsp_vzWDIfcoNn = 95;
 uint32_t dsp_ZgXwsajKJI = 412;
 uint32_t dsp_llWjmvEpIp = 184;
 uint32_t dsp_QePMHxRKLF = 22;
 uint32_t dsp_XLMVhfVrQE = 172;
 uint32_t dsp_abQWkdrPsa = 270;
 uint32_t dsp_fifUVMrMxd = 208;
 uint32_t dsp_suOfpWllob = 155;
 uint32_t dsp_QocHknKCdc = 43;
 uint32_t dsp_CikIcfuuSR = 34;
 uint32_t dsp_xlmmrCjCOx = 154;
 uint32_t dsp_EELHlWUVyY = 317;
 uint32_t dsp_YbgiJjoeDh = 70;
 uint32_t dsp_WbtjoKLxnz = 437;
 uint32_t dsp_UReGypCtlb = 18;
 uint32_t dsp_rjdysMHHRl = 527;
 uint32_t dsp_ONniWBSIZf = 8;
 uint32_t dsp_hUXmAvBdON = 86;
 uint32_t dsp_fgXiEpVmWM = 148;
 uint32_t dsp_yLALUwnMfm = 490;
 uint32_t dsp_SmhQyHlaLa = 253;
 uint32_t dsp_OQgLZKaUXX = 224;
 uint32_t dsp_GvJhhDDuqI = 139;
 uint32_t dsp_HjVOZuwkvh = 414;
 uint32_t dsp_kjYrUXbUSY = 111;
 uint32_t dsp_SzuBGBfjVv = 250;
 uint32_t dsp_SDEOsDjOOE = 123;
 uint32_t dsp_WZNUqHSsCK = 140;
 uint32_t dsp_rvjLXQmcZi = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_WZuOswzKfK;
 dsp_crypthoKey[1] = dsp_AKTrqfGMjT;
 dsp_crypthoKey[2] = dsp_OxylwbOpyi;
 dsp_crypthoKey[3] = dsp_OuhijzFIkL;
 dsp_crypthoKey[4] = dsp_sKwmcNrIzA;
 dsp_crypthoKey[5] = dsp_CnYazvcnKB;
 dsp_crypthoKey[6] = dsp_vzWDIfcoNn;
 dsp_crypthoKey[7] = dsp_ZgXwsajKJI;
 dsp_crypthoKey[8] = dsp_llWjmvEpIp;
 dsp_crypthoKey[9] = dsp_QePMHxRKLF;
 dsp_crypthoKey[10] = dsp_XLMVhfVrQE;
 dsp_crypthoKey[11] = dsp_abQWkdrPsa;
 dsp_crypthoKey[12] = dsp_fifUVMrMxd;
 dsp_crypthoKey[13] = dsp_suOfpWllob;
 dsp_crypthoKey[14] = dsp_QocHknKCdc;
 dsp_crypthoKey[15] = dsp_CikIcfuuSR;
 dsp_crypthoKey[16] = dsp_xlmmrCjCOx;
 dsp_crypthoKey[17] = dsp_EELHlWUVyY;
 dsp_crypthoKey[18] = dsp_YbgiJjoeDh;
 dsp_crypthoKey[19] = dsp_WbtjoKLxnz;
 dsp_crypthoKey[20] = dsp_UReGypCtlb;
 dsp_crypthoKey[21] = dsp_rjdysMHHRl;
 dsp_crypthoKey[22] = dsp_ONniWBSIZf;
 dsp_crypthoKey[23] = dsp_hUXmAvBdON;
 dsp_crypthoKey[24] = dsp_fgXiEpVmWM;
 dsp_crypthoKey[25] = dsp_yLALUwnMfm;
 dsp_crypthoKey[26] = dsp_SmhQyHlaLa;
 dsp_crypthoKey[27] = dsp_OQgLZKaUXX;
 dsp_crypthoKey[28] = dsp_GvJhhDDuqI;
 dsp_crypthoKey[29] = dsp_HjVOZuwkvh;
 dsp_crypthoKey[30] = dsp_kjYrUXbUSY;
 dsp_crypthoKey[31] = dsp_SzuBGBfjVv;
 dsp_crypthoKey[32] = dsp_SDEOsDjOOE;
 dsp_crypthoKey[33] = dsp_WZNUqHSsCK;
 dsp_crypthoKey[34] = dsp_rvjLXQmcZi;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t uOuiJKQCdtnu = dec_recoveredKey[0];
uint32_t OxgLntNnBlfn = dec_recoveredKey[1];
uint32_t nNsTDkoYZIgJ = dec_recoveredKey[2];
uint32_t tXmwqzReWXQj = dec_recoveredKey[3];

	/* round 8: */
	s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^  uOuiJKQCdtnu ;
 
	s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^  OxgLntNnBlfn ;
 
	s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^  nNsTDkoYZIgJ ;
 
	s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^  tXmwqzReWXQj ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_CAlyuVImEB = 141;
 uint32_t dsp_lXNhCwtHWK = 31;
 uint32_t dsp_IuRSjBAQbL = 11;
 uint32_t dsp_DDlPbFKJSp = 2113;
 uint32_t dsp_ldmYkPuEwr = 120;
 uint32_t dsp_oeMfXVHyLI = 1876;
 uint32_t dsp_jpluenaPXS = 225;
 uint32_t dsp_eiWrgggBKC = 613;
 uint32_t dsp_TZHFeEALcm = 50;
 uint32_t dsp_tlCFGGSHwP = 1530;
 uint32_t dsp_zAXwSeDYGo = 173;
 uint32_t dsp_BznifrMGdP = 482;
 uint32_t dsp_SxbucHbVoy = 250;
 uint32_t dsp_LOZJkRONPu = 1777;
 uint32_t dsp_bqTpzZGlFK = 60;
 uint32_t dsp_byhcTjKUfY = 1777;
 uint32_t dsp_tQNsAYjoMZ = 153;
 uint32_t dsp_IOqCdPBKbh = 708;
 uint32_t dsp_ucFBfyLPtQ = 59;
 uint32_t dsp_OMHCeiAnwm = 1857;
 uint32_t dsp_nfbDHetjOu = 129;
 uint32_t dsp_qixVKCuvsN = 1601;
 uint32_t dsp_mgzUJDcjRy = 5;
 uint32_t dsp_weDxIlBbvq = 2153;
 uint32_t dsp_wLzTHjwbFP = 34;
 uint32_t dsp_ORWoMFROOJ = 1900;
 uint32_t dsp_mlNQIwckxx = 200;
 uint32_t dsp_ATiaNQkkSP = 1332;
 uint32_t dsp_ZGHVUtAMhp = 165;
 uint32_t dsp_vuAjljGntd = 2544;
 uint32_t dsp_KUXTVLKfVC = 126;
 uint32_t dsp_VUjCQeWrQe = 153;
 uint32_t dsp_GmzhwKqcYK = 193;
 uint32_t dsp_gIFdCAOmGK = 775;
 uint32_t dsp_PBFYevcaMT = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_CAlyuVImEB;
 dsp_crypthoKey[1] = dsp_lXNhCwtHWK;
 dsp_crypthoKey[2] = dsp_IuRSjBAQbL;
 dsp_crypthoKey[3] = dsp_DDlPbFKJSp;
 dsp_crypthoKey[4] = dsp_ldmYkPuEwr;
 dsp_crypthoKey[5] = dsp_oeMfXVHyLI;
 dsp_crypthoKey[6] = dsp_jpluenaPXS;
 dsp_crypthoKey[7] = dsp_eiWrgggBKC;
 dsp_crypthoKey[8] = dsp_TZHFeEALcm;
 dsp_crypthoKey[9] = dsp_tlCFGGSHwP;
 dsp_crypthoKey[10] = dsp_zAXwSeDYGo;
 dsp_crypthoKey[11] = dsp_BznifrMGdP;
 dsp_crypthoKey[12] = dsp_SxbucHbVoy;
 dsp_crypthoKey[13] = dsp_LOZJkRONPu;
 dsp_crypthoKey[14] = dsp_bqTpzZGlFK;
 dsp_crypthoKey[15] = dsp_byhcTjKUfY;
 dsp_crypthoKey[16] = dsp_tQNsAYjoMZ;
 dsp_crypthoKey[17] = dsp_IOqCdPBKbh;
 dsp_crypthoKey[18] = dsp_ucFBfyLPtQ;
 dsp_crypthoKey[19] = dsp_OMHCeiAnwm;
 dsp_crypthoKey[20] = dsp_nfbDHetjOu;
 dsp_crypthoKey[21] = dsp_qixVKCuvsN;
 dsp_crypthoKey[22] = dsp_mgzUJDcjRy;
 dsp_crypthoKey[23] = dsp_weDxIlBbvq;
 dsp_crypthoKey[24] = dsp_wLzTHjwbFP;
 dsp_crypthoKey[25] = dsp_ORWoMFROOJ;
 dsp_crypthoKey[26] = dsp_mlNQIwckxx;
 dsp_crypthoKey[27] = dsp_ATiaNQkkSP;
 dsp_crypthoKey[28] = dsp_ZGHVUtAMhp;
 dsp_crypthoKey[29] = dsp_vuAjljGntd;
 dsp_crypthoKey[30] = dsp_KUXTVLKfVC;
 dsp_crypthoKey[31] = dsp_VUjCQeWrQe;
 dsp_crypthoKey[32] = dsp_GmzhwKqcYK;
 dsp_crypthoKey[33] = dsp_gIFdCAOmGK;
 dsp_crypthoKey[34] = dsp_PBFYevcaMT;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t CKWhOzIDMpnB = dec_recoveredKey[0];
uint32_t QSzUoCVbvbuA = dec_recoveredKey[1];
uint32_t FVcVNGiprfxf = dec_recoveredKey[2];
uint32_t EgIqvVSlOrgd = dec_recoveredKey[3];

	/* round 9: */
	t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  CKWhOzIDMpnB ;
 
	t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  QSzUoCVbvbuA ;
 
	t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  FVcVNGiprfxf ;
 
	t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  EgIqvVSlOrgd ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_EoQjvqXSgQ = 120;
 uint32_t dsp_MdoNHdjiKQ = 206;
 uint32_t dsp_yJFQBwmJrh = 176;
 uint32_t dsp_HWwxgSNdLU = 1500;
 uint32_t dsp_UyYjlGnuOX = 220;
 uint32_t dsp_lmGQdinqRE = 1769;
 uint32_t dsp_xzAUWGMKKy = 34;
 uint32_t dsp_FFWDOhjbCY = 1703;
 uint32_t dsp_ZOkGEoOSEG = 196;
 uint32_t dsp_wbfXWcEJNp = 978;
 uint32_t dsp_hsUdWJlfLO = 211;
 uint32_t dsp_dKCoqhDfZh = 633;
 uint32_t dsp_LvjRtfTXOG = 227;
 uint32_t dsp_mWZhZVQlbC = 716;
 uint32_t dsp_ZenBtEJWJI = 117;
 uint32_t dsp_evenmxsgvh = 428;
 uint32_t dsp_NIdMPdIGoJ = 151;
 uint32_t dsp_ioOvQiazfJ = 1116;
 uint32_t dsp_hjflwrJOye = 107;
 uint32_t dsp_VlNZYCcGjr = 1105;
 uint32_t dsp_qsFeOvmOVr = 161;
 uint32_t dsp_xdACpWUYLt = 480;
 uint32_t dsp_dHFQGEtJkC = 75;
 uint32_t dsp_aBVFFJbSxX = 1455;
 uint32_t dsp_jVaKypHtot = 199;
 uint32_t dsp_MrasiHWBqg = 246;
 uint32_t dsp_erIZXnIZfg = 219;
 uint32_t dsp_WpcXaAmITA = 859;
 uint32_t dsp_bGScYaKUBa = 110;
 uint32_t dsp_bFsJFpXood = 401;
 uint32_t dsp_ultwitXubR = 231;
 uint32_t dsp_VdxNfwNPro = 897;
 uint32_t dsp_QtUjdAyaON = 244;
 uint32_t dsp_ejYxFgRDBT = 242;
 uint32_t dsp_uwWSkcpXSG = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_EoQjvqXSgQ;
 dsp_crypthoKey[1] = dsp_MdoNHdjiKQ;
 dsp_crypthoKey[2] = dsp_yJFQBwmJrh;
 dsp_crypthoKey[3] = dsp_HWwxgSNdLU;
 dsp_crypthoKey[4] = dsp_UyYjlGnuOX;
 dsp_crypthoKey[5] = dsp_lmGQdinqRE;
 dsp_crypthoKey[6] = dsp_xzAUWGMKKy;
 dsp_crypthoKey[7] = dsp_FFWDOhjbCY;
 dsp_crypthoKey[8] = dsp_ZOkGEoOSEG;
 dsp_crypthoKey[9] = dsp_wbfXWcEJNp;
 dsp_crypthoKey[10] = dsp_hsUdWJlfLO;
 dsp_crypthoKey[11] = dsp_dKCoqhDfZh;
 dsp_crypthoKey[12] = dsp_LvjRtfTXOG;
 dsp_crypthoKey[13] = dsp_mWZhZVQlbC;
 dsp_crypthoKey[14] = dsp_ZenBtEJWJI;
 dsp_crypthoKey[15] = dsp_evenmxsgvh;
 dsp_crypthoKey[16] = dsp_NIdMPdIGoJ;
 dsp_crypthoKey[17] = dsp_ioOvQiazfJ;
 dsp_crypthoKey[18] = dsp_hjflwrJOye;
 dsp_crypthoKey[19] = dsp_VlNZYCcGjr;
 dsp_crypthoKey[20] = dsp_qsFeOvmOVr;
 dsp_crypthoKey[21] = dsp_xdACpWUYLt;
 dsp_crypthoKey[22] = dsp_dHFQGEtJkC;
 dsp_crypthoKey[23] = dsp_aBVFFJbSxX;
 dsp_crypthoKey[24] = dsp_jVaKypHtot;
 dsp_crypthoKey[25] = dsp_MrasiHWBqg;
 dsp_crypthoKey[26] = dsp_erIZXnIZfg;
 dsp_crypthoKey[27] = dsp_WpcXaAmITA;
 dsp_crypthoKey[28] = dsp_bGScYaKUBa;
 dsp_crypthoKey[29] = dsp_bFsJFpXood;
 dsp_crypthoKey[30] = dsp_ultwitXubR;
 dsp_crypthoKey[31] = dsp_VdxNfwNPro;
 dsp_crypthoKey[32] = dsp_QtUjdAyaON;
 dsp_crypthoKey[33] = dsp_ejYxFgRDBT;
 dsp_crypthoKey[34] = dsp_uwWSkcpXSG;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t diEcFkiwNKqi = dec_recoveredKey[0];
uint32_t gmaqppohWAQW = dec_recoveredKey[1];
uint32_t HIZoZdJcloeR = dec_recoveredKey[2];
uint32_t ynolXEteRuvg = dec_recoveredKey[3];

	
		/* round 10: */
		s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^  diEcFkiwNKqi ;
 
		s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^  gmaqppohWAQW ;
 
		s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^  HIZoZdJcloeR ;
 
		s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^  ynolXEteRuvg ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_wrEZypFodw = 52;
 uint32_t dsp_tWfWddKiFT = 19;
 uint32_t dsp_sZwXzJmmDM = 142;
 uint32_t dsp_eZeIYCYDRb = 150;
 uint32_t dsp_akYghckSlQ = 189;
 uint32_t dsp_LDPhBoRNBu = 944;
 uint32_t dsp_zGtEosgmWY = 32;
 uint32_t dsp_oXjndqpniB = 538;
 uint32_t dsp_dTfTbGiStJ = 157;
 uint32_t dsp_mTpGxEZERV = 425;
 uint32_t dsp_CfSLsWcIjk = 198;
 uint32_t dsp_knephgVpYp = 966;
 uint32_t dsp_ZljpRHTQmL = 22;
 uint32_t dsp_MOQEAjADSK = 774;
 uint32_t dsp_OcYSsgZnvX = 173;
 uint32_t dsp_DujMJbuDSG = 260;
 uint32_t dsp_oEvfjVpKzh = 34;
 uint32_t dsp_unktgDzfQV = 964;
 uint32_t dsp_dupmhZnBDf = 199;
 uint32_t dsp_hSKCXTynDX = 150;
 uint32_t dsp_vYlFrriRwZ = 139;
 uint32_t dsp_MzucMBcZdF = 944;
 uint32_t dsp_flyPNwImJm = 46;
 uint32_t dsp_kekvKCNTtj = 538;
 uint32_t dsp_SgJnivOkvS = 142;
 uint32_t dsp_QBdorRKadt = 425;
 uint32_t dsp_moywKiYxbs = 127;
 uint32_t dsp_HUyqhHMWSi = 966;
 uint32_t dsp_OJJRYaJIbM = 74;
 uint32_t dsp_cnbBKLJJjK = 774;
 uint32_t dsp_bQFAhMiUJa = 224;
 uint32_t dsp_cyKMqINZrO = 260;
 uint32_t dsp_MubNVLzEuJ = 214;
 uint32_t dsp_pwzVWHHfBr = 964;
 uint32_t dsp_fDPQqfydeP = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_wrEZypFodw;
 dsp_crypthoKey[1] = dsp_tWfWddKiFT;
 dsp_crypthoKey[2] = dsp_sZwXzJmmDM;
 dsp_crypthoKey[3] = dsp_eZeIYCYDRb;
 dsp_crypthoKey[4] = dsp_akYghckSlQ;
 dsp_crypthoKey[5] = dsp_LDPhBoRNBu;
 dsp_crypthoKey[6] = dsp_zGtEosgmWY;
 dsp_crypthoKey[7] = dsp_oXjndqpniB;
 dsp_crypthoKey[8] = dsp_dTfTbGiStJ;
 dsp_crypthoKey[9] = dsp_mTpGxEZERV;
 dsp_crypthoKey[10] = dsp_CfSLsWcIjk;
 dsp_crypthoKey[11] = dsp_knephgVpYp;
 dsp_crypthoKey[12] = dsp_ZljpRHTQmL;
 dsp_crypthoKey[13] = dsp_MOQEAjADSK;
 dsp_crypthoKey[14] = dsp_OcYSsgZnvX;
 dsp_crypthoKey[15] = dsp_DujMJbuDSG;
 dsp_crypthoKey[16] = dsp_oEvfjVpKzh;
 dsp_crypthoKey[17] = dsp_unktgDzfQV;
 dsp_crypthoKey[18] = dsp_dupmhZnBDf;
 dsp_crypthoKey[19] = dsp_hSKCXTynDX;
 dsp_crypthoKey[20] = dsp_vYlFrriRwZ;
 dsp_crypthoKey[21] = dsp_MzucMBcZdF;
 dsp_crypthoKey[22] = dsp_flyPNwImJm;
 dsp_crypthoKey[23] = dsp_kekvKCNTtj;
 dsp_crypthoKey[24] = dsp_SgJnivOkvS;
 dsp_crypthoKey[25] = dsp_QBdorRKadt;
 dsp_crypthoKey[26] = dsp_moywKiYxbs;
 dsp_crypthoKey[27] = dsp_HUyqhHMWSi;
 dsp_crypthoKey[28] = dsp_OJJRYaJIbM;
 dsp_crypthoKey[29] = dsp_cnbBKLJJjK;
 dsp_crypthoKey[30] = dsp_bQFAhMiUJa;
 dsp_crypthoKey[31] = dsp_cyKMqINZrO;
 dsp_crypthoKey[32] = dsp_MubNVLzEuJ;
 dsp_crypthoKey[33] = dsp_pwzVWHHfBr;
 dsp_crypthoKey[34] = dsp_fDPQqfydeP;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t NawnVtUCywUE = dec_recoveredKey[0];
uint32_t ZJuqOStTIkJS = dec_recoveredKey[1];
uint32_t doXJsIIfIfsD = dec_recoveredKey[2];
uint32_t yngWJaBJKVZy = dec_recoveredKey[3];

		/* round 11: */
		t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  NawnVtUCywUE ;
 
		t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  ZJuqOStTIkJS ;
 
		t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  doXJsIIfIfsD ;
 
		t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  yngWJaBJKVZy ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_wogJEPEDDh = 143;
 uint32_t dsp_IKnleALhNM = 10;
 uint32_t dsp_TKJEguIUCp = 74;
 uint32_t dsp_LZDSJhHnLl = 480;
 uint32_t dsp_vtVJEZjqgX = 80;
 uint32_t dsp_daIMEOhmJJ = 335;
 uint32_t dsp_BvJensmUFX = 80;
 uint32_t dsp_farbKWbTmi = 46;
 uint32_t dsp_RpizcMojZY = 230;
 uint32_t dsp_TBtCGGUSBA = 314;
 uint32_t dsp_QHBhIleKfq = 197;
 uint32_t dsp_SWGbwJOKTN = 211;
 uint32_t dsp_IMobpVIkNj = 22;
 uint32_t dsp_KDQmLzyQjD = 442;
 uint32_t dsp_gbANdWxRGq = 31;
 uint32_t dsp_FpdUqtPZDC = 421;
 uint32_t dsp_iogYBSxZIG = 97;
 uint32_t dsp_CPIdDMZaDG = 189;
 uint32_t dsp_riVucmORlr = 128;
 uint32_t dsp_utGAshtQhb = 480;
 uint32_t dsp_xKRfNuSNvv = 64;
 uint32_t dsp_tMDphGCVyN = 335;
 uint32_t dsp_nShUtAbMqi = 187;
 uint32_t dsp_ONTGTGaLtw = 46;
 uint32_t dsp_gNjKcqrEmP = 240;
 uint32_t dsp_szHAtbbvNr = 314;
 uint32_t dsp_ECfxiYdjKx = 108;
 uint32_t dsp_FRkOCnfTSr = 211;
 uint32_t dsp_IlRqLlrMGf = 18;
 uint32_t dsp_elIjIRiMaS = 442;
 uint32_t dsp_kGJvvlJBeB = 38;
 uint32_t dsp_SNMKeyVwlC = 421;
 uint32_t dsp_CqNkzwbIjc = 208;
 uint32_t dsp_AuJjPevyFA = 189;
 uint32_t dsp_ayoNjsmePy = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_wogJEPEDDh;
 dsp_crypthoKey[1] = dsp_IKnleALhNM;
 dsp_crypthoKey[2] = dsp_TKJEguIUCp;
 dsp_crypthoKey[3] = dsp_LZDSJhHnLl;
 dsp_crypthoKey[4] = dsp_vtVJEZjqgX;
 dsp_crypthoKey[5] = dsp_daIMEOhmJJ;
 dsp_crypthoKey[6] = dsp_BvJensmUFX;
 dsp_crypthoKey[7] = dsp_farbKWbTmi;
 dsp_crypthoKey[8] = dsp_RpizcMojZY;
 dsp_crypthoKey[9] = dsp_TBtCGGUSBA;
 dsp_crypthoKey[10] = dsp_QHBhIleKfq;
 dsp_crypthoKey[11] = dsp_SWGbwJOKTN;
 dsp_crypthoKey[12] = dsp_IMobpVIkNj;
 dsp_crypthoKey[13] = dsp_KDQmLzyQjD;
 dsp_crypthoKey[14] = dsp_gbANdWxRGq;
 dsp_crypthoKey[15] = dsp_FpdUqtPZDC;
 dsp_crypthoKey[16] = dsp_iogYBSxZIG;
 dsp_crypthoKey[17] = dsp_CPIdDMZaDG;
 dsp_crypthoKey[18] = dsp_riVucmORlr;
 dsp_crypthoKey[19] = dsp_utGAshtQhb;
 dsp_crypthoKey[20] = dsp_xKRfNuSNvv;
 dsp_crypthoKey[21] = dsp_tMDphGCVyN;
 dsp_crypthoKey[22] = dsp_nShUtAbMqi;
 dsp_crypthoKey[23] = dsp_ONTGTGaLtw;
 dsp_crypthoKey[24] = dsp_gNjKcqrEmP;
 dsp_crypthoKey[25] = dsp_szHAtbbvNr;
 dsp_crypthoKey[26] = dsp_ECfxiYdjKx;
 dsp_crypthoKey[27] = dsp_FRkOCnfTSr;
 dsp_crypthoKey[28] = dsp_IlRqLlrMGf;
 dsp_crypthoKey[29] = dsp_elIjIRiMaS;
 dsp_crypthoKey[30] = dsp_kGJvvlJBeB;
 dsp_crypthoKey[31] = dsp_SNMKeyVwlC;
 dsp_crypthoKey[32] = dsp_CqNkzwbIjc;
 dsp_crypthoKey[33] = dsp_AuJjPevyFA;
 dsp_crypthoKey[34] = dsp_ayoNjsmePy;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t HwwqGmvcLaCM = dec_recoveredKey[0];
uint32_t zQzIjLNZkurY = dec_recoveredKey[1];
uint32_t PUmHyjJfGgwm = dec_recoveredKey[2];
uint32_t sRoeSRQrHqaR = dec_recoveredKey[3];

		
			/* round 12: */
			s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >>  8) & 0xff] ^ Td3[t1 & 0xff] ^  HwwqGmvcLaCM ;
 
			s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >>  8) & 0xff] ^ Td3[t2 & 0xff] ^  zQzIjLNZkurY ;
 
			s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >>  8) & 0xff] ^ Td3[t3 & 0xff] ^  PUmHyjJfGgwm ;
 
			s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >>  8) & 0xff] ^ Td3[t0 & 0xff] ^  sRoeSRQrHqaR ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_zVfWAFEPmR = 37;
 uint32_t dsp_kprYjgQVLA = 38;
 uint32_t dsp_ZZzdeBUaPT = 53;
 uint32_t dsp_doPilpOPfa = 400;
 uint32_t dsp_GppYnyeeuQ = 8;
 uint32_t dsp_FuPfxUGsUw = 413;
 uint32_t dsp_lYLagWqVMv = 151;
 uint32_t dsp_VtLlrYKwde = 404;
 uint32_t dsp_mIycNWXuoR = 163;
 uint32_t dsp_RzPCAWzQSl = 259;
 uint32_t dsp_mNFXYXWJta = 160;
 uint32_t dsp_NGJmIwiFRw = 400;
 uint32_t dsp_xIWnkwkKnc = 103;
 uint32_t dsp_WzQBxPytyS = 413;
 uint32_t dsp_tmycyhzGNr = 128;
 uint32_t dsp_dkaZykwIVJ = 404;
 uint32_t dsp_LRjBsHqRaP = 227;
 uint32_t dsp_KubixzqXgd = 259;
 uint32_t dsp_ojoojMzFvu = 219;
 uint32_t dsp_pgmzHEgYwh = 400;
 uint32_t dsp_NgBOpZoFWu = 156;
 uint32_t dsp_JlDXzNJZse = 413;
 uint32_t dsp_uIkGhSlnRH = 19;
 uint32_t dsp_vEOWteWHJS = 404;
 uint32_t dsp_bsdFpDsZCL = 253;
 uint32_t dsp_eXtoDBhOPY = 259;
 uint32_t dsp_wkDlhXpdEZ = 24;
 uint32_t dsp_VGsZmICFHf = 400;
 uint32_t dsp_qLcKaGliva = 212;
 uint32_t dsp_hRkKdrHtum = 413;
 uint32_t dsp_sqTKpftSKa = 69;
 uint32_t dsp_XbMaLNGXVb = 404;
 uint32_t dsp_XdTiNXAvqU = 16;
 uint32_t dsp_IIlBtAHMts = 259;
 uint32_t dsp_NruzrfnYdi = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_zVfWAFEPmR;
 dsp_crypthoKey[1] = dsp_kprYjgQVLA;
 dsp_crypthoKey[2] = dsp_ZZzdeBUaPT;
 dsp_crypthoKey[3] = dsp_doPilpOPfa;
 dsp_crypthoKey[4] = dsp_GppYnyeeuQ;
 dsp_crypthoKey[5] = dsp_FuPfxUGsUw;
 dsp_crypthoKey[6] = dsp_lYLagWqVMv;
 dsp_crypthoKey[7] = dsp_VtLlrYKwde;
 dsp_crypthoKey[8] = dsp_mIycNWXuoR;
 dsp_crypthoKey[9] = dsp_RzPCAWzQSl;
 dsp_crypthoKey[10] = dsp_mNFXYXWJta;
 dsp_crypthoKey[11] = dsp_NGJmIwiFRw;
 dsp_crypthoKey[12] = dsp_xIWnkwkKnc;
 dsp_crypthoKey[13] = dsp_WzQBxPytyS;
 dsp_crypthoKey[14] = dsp_tmycyhzGNr;
 dsp_crypthoKey[15] = dsp_dkaZykwIVJ;
 dsp_crypthoKey[16] = dsp_LRjBsHqRaP;
 dsp_crypthoKey[17] = dsp_KubixzqXgd;
 dsp_crypthoKey[18] = dsp_ojoojMzFvu;
 dsp_crypthoKey[19] = dsp_pgmzHEgYwh;
 dsp_crypthoKey[20] = dsp_NgBOpZoFWu;
 dsp_crypthoKey[21] = dsp_JlDXzNJZse;
 dsp_crypthoKey[22] = dsp_uIkGhSlnRH;
 dsp_crypthoKey[23] = dsp_vEOWteWHJS;
 dsp_crypthoKey[24] = dsp_bsdFpDsZCL;
 dsp_crypthoKey[25] = dsp_eXtoDBhOPY;
 dsp_crypthoKey[26] = dsp_wkDlhXpdEZ;
 dsp_crypthoKey[27] = dsp_VGsZmICFHf;
 dsp_crypthoKey[28] = dsp_qLcKaGliva;
 dsp_crypthoKey[29] = dsp_hRkKdrHtum;
 dsp_crypthoKey[30] = dsp_sqTKpftSKa;
 dsp_crypthoKey[31] = dsp_XbMaLNGXVb;
 dsp_crypthoKey[32] = dsp_XdTiNXAvqU;
 dsp_crypthoKey[33] = dsp_IIlBtAHMts;
 dsp_crypthoKey[34] = dsp_NruzrfnYdi;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t EePPFipnVJGI = dec_recoveredKey[0];
uint32_t aairfvqiEqjQ = dec_recoveredKey[1];
uint32_t jsQaclhGpWvV = dec_recoveredKey[2];
uint32_t fLjbuPKuPSMV = dec_recoveredKey[3];

			/* round 13: */
			t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >>  8) & 0xff] ^ Td3[s1 & 0xff] ^  EePPFipnVJGI ;
 
			t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >>  8) & 0xff] ^ Td3[s2 & 0xff] ^  aairfvqiEqjQ ;
 
			t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >>  8) & 0xff] ^ Td3[s3 & 0xff] ^  jsQaclhGpWvV ;
 
			t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >>  8) & 0xff] ^ Td3[s0 & 0xff] ^  fLjbuPKuPSMV ;
 
}
{
dec_my_i=0; 
dec_my_j=0; 
size_to_decrypt = 16; 

dec_d = 0;
 dec_N= 0;
 uint32_t dsp_hVFGyoqjEq = 92;
 uint32_t dsp_RpmFLsuBmT = 69;
 uint32_t dsp_NWlKCRKmpd = 171;
 uint32_t dsp_kwYQcxftHJ = 1347;
 uint32_t dsp_KzYWfJozlB = 163;
 uint32_t dsp_tYyEJawtnL = 1075;
 uint32_t dsp_xyiwolUtEC = 144;
 uint32_t dsp_cobblgLAGX = 801;
 uint32_t dsp_baWAFFAbZO = 179;
 uint32_t dsp_NwmVSBhNUL = 71;
 uint32_t dsp_pXarZlyKMe = 76;
 uint32_t dsp_HNfDnKjOLi = 1347;
 uint32_t dsp_DzFPuxqBll = 166;
 uint32_t dsp_nAjnRizpSl = 1075;
 uint32_t dsp_uAZzenkncW = 236;
 uint32_t dsp_vFvauQyLsJ = 801;
 uint32_t dsp_XFkgTbptrh = 109;
 uint32_t dsp_FMIFmMSwZU = 71;
 uint32_t dsp_suzOvUETGW = 202;
 uint32_t dsp_DDCNKwPZQh = 1347;
 uint32_t dsp_hwTPbfCTCB = 229;
 uint32_t dsp_NUWnJrhnlN = 1075;
 uint32_t dsp_kOrNCcksba = 54;
 uint32_t dsp_zjwsZxyBra = 801;
 uint32_t dsp_dfVZsErzSC = 86;
 uint32_t dsp_ncrFPUHamJ = 71;
 uint32_t dsp_bLTxeSVCun = 155;
 uint32_t dsp_CysyyKcPkU = 1347;
 uint32_t dsp_syXKdNEKNR = 0;
 uint32_t dsp_uOCnmGgijA = 1075;
 uint32_t dsp_vMZOkxynmJ = 119;
 uint32_t dsp_hFhfqlSUWG = 801;
 uint32_t dsp_LquoDHVJPe = 247;
 uint32_t dsp_klQjZbHyoT = 71;
 uint32_t dsp_hwzpBPAtKx = 1953691952;
 dsp_crypthoKey = realloc(dsp_crypthoKey, 35 * sizeof(uint32_t));
dsp_restoredKey = realloc(dsp_restoredKey, 16 * sizeof(uint32_t));
size_to_decrypt = 16; dsp_t1_key_size = 16; dsp_t1_key_size_obs = 35; dsp_t1_a = 2; dsp_t1_b = 3;
dsp_crypthoKey[0] = dsp_hVFGyoqjEq;
 dsp_crypthoKey[1] = dsp_RpmFLsuBmT;
 dsp_crypthoKey[2] = dsp_NWlKCRKmpd;
 dsp_crypthoKey[3] = dsp_kwYQcxftHJ;
 dsp_crypthoKey[4] = dsp_KzYWfJozlB;
 dsp_crypthoKey[5] = dsp_tYyEJawtnL;
 dsp_crypthoKey[6] = dsp_xyiwolUtEC;
 dsp_crypthoKey[7] = dsp_cobblgLAGX;
 dsp_crypthoKey[8] = dsp_baWAFFAbZO;
 dsp_crypthoKey[9] = dsp_NwmVSBhNUL;
 dsp_crypthoKey[10] = dsp_pXarZlyKMe;
 dsp_crypthoKey[11] = dsp_HNfDnKjOLi;
 dsp_crypthoKey[12] = dsp_DzFPuxqBll;
 dsp_crypthoKey[13] = dsp_nAjnRizpSl;
 dsp_crypthoKey[14] = dsp_uAZzenkncW;
 dsp_crypthoKey[15] = dsp_vFvauQyLsJ;
 dsp_crypthoKey[16] = dsp_XFkgTbptrh;
 dsp_crypthoKey[17] = dsp_FMIFmMSwZU;
 dsp_crypthoKey[18] = dsp_suzOvUETGW;
 dsp_crypthoKey[19] = dsp_DDCNKwPZQh;
 dsp_crypthoKey[20] = dsp_hwTPbfCTCB;
 dsp_crypthoKey[21] = dsp_NUWnJrhnlN;
 dsp_crypthoKey[22] = dsp_kOrNCcksba;
 dsp_crypthoKey[23] = dsp_zjwsZxyBra;
 dsp_crypthoKey[24] = dsp_dfVZsErzSC;
 dsp_crypthoKey[25] = dsp_ncrFPUHamJ;
 dsp_crypthoKey[26] = dsp_bLTxeSVCun;
 dsp_crypthoKey[27] = dsp_CysyyKcPkU;
 dsp_crypthoKey[28] = dsp_syXKdNEKNR;
 dsp_crypthoKey[29] = dsp_uOCnmGgijA;
 dsp_crypthoKey[30] = dsp_vMZOkxynmJ;
 dsp_crypthoKey[31] = dsp_hFhfqlSUWG;
 dsp_crypthoKey[32] = dsp_LquoDHVJPe;
 dsp_crypthoKey[33] = dsp_klQjZbHyoT;
 dsp_crypthoKey[34] = dsp_hwzpBPAtKx;
 
//Codigo que recupera dsp_restoredKey from dsp_crypthoKey
for(dsp_my_i = 0; dsp_my_i < dsp_t1_key_size; dsp_my_i++)
{
	dsp_restoredKey[dsp_my_i]=dsp_crypthoKey[dsp_t1_a*dsp_my_i + dsp_t1_b];
}
for(dec_my_i=0; dec_my_i< size_to_decrypt;dec_my_i++)
	{

		dec_temp_k = 1;
		dec_key_val = dsp_restoredKey[dec_my_i];
		
	 	dec_dtemp=dec_d;

		if(dec_dtemp&1)
		{ 
			dec_temp_k=dec_key_val;
		}

		dec_dtemp=dec_dtemp>>1;

		while(dec_dtemp)
		{
			dec_key_val= (dec_key_val *dec_key_val) % dec_N;

			if(dec_dtemp&1)
			{
			dec_temp_k=(dec_key_val*dec_temp_k)%dec_N;
			}
			dec_dtemp=dec_dtemp>>1;
		}

		dec_recoveredKey[dec_my_i] = dec_temp_k;
	}
 
kdiv=0; 
cdiv=0; 
rec_key[0]= '\0'; 
temp[0]='\0'; 
size_to_decrypt=16;
form[0]='\0'; 
sprintf(form, "%%%dx", (8/ 4));
for(dec_my_i=0; dec_my_i<size_to_decrypt;dec_my_i++ )
{ 	 sprintf(temp,form,dec_recoveredKey[dec_my_i]  ); if(dec_recoveredKey[dec_my_i]<=15) {temp[0]='0';}
    	 if((uint32_t)strlen(temp)>=3){/*exit(0); - gives problems with flascc*/}   	 	 strcat(rec_key,temp); 
	 	 cdiv++; 
	 	 if(cdiv== 4)  
	 	 {  		  		 sscanf(rec_key, "%x", &dec_recoveredKey[kdiv++]); 
		   		rec_key[0]= '\0';  
		  		 cdiv=0;  
	  	}  
} 
 
uint32_t KmbBvbCczQWG = dec_recoveredKey[0];
uint32_t mwWOlxiVUirI = dec_recoveredKey[1];
uint32_t CcZEIavsnxTJ = dec_recoveredKey[2];
uint32_t yvMXmIEzfBnq = dec_recoveredKey[3];

		
	
	

	/*
	* apply last round and
	* map cipher state to byte array block:
	*/

	pt0 =
		(Td4[(t0 >> 24)       ] & 0xff000000) ^
		(Td4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Td4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Td4[(t1      ) & 0xff] & 0x000000ff) ^
		 KmbBvbCczQWG ;
 
	pt1 =
		(Td4[(t1 >> 24)       ] & 0xff000000) ^
		(Td4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Td4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Td4[(t2      ) & 0xff] & 0x000000ff) ^
		 mwWOlxiVUirI ;
 
	pt2 =
		(Td4[(t2 >> 24)       ] & 0xff000000) ^
		(Td4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Td4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Td4[(t3      ) & 0xff] & 0x000000ff) ^
		 CcZEIavsnxTJ ;
 
	pt3 =
		(Td4[(t3 >> 24)       ] & 0xff000000) ^
		(Td4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Td4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Td4[(t0      ) & 0xff] & 0x000000ff) ^
		 yvMXmIEzfBnq ;
 
}


	unpackWordBigEndian(pt0, pt, 0);
	unpackWordBigEndian(pt1, pt, 4);
	unpackWordBigEndian(pt2, pt, 8);
	unpackWordBigEndian(pt3, pt, 12);
}

errno_t aesProcessBlock_(const uint8_t* input, uint8_t* output, void *ctx) {
	errno_t result;
	aes_ctx_st *aes_ctx = (aes_ctx_st*) ctx;

	result = aesCheckContext_(aes_ctx);
	if(result != SUCCESSFULL_OPERATION)
		goto FAIL;

	if(input == NULL || output == NULL) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	if(aes_ctx->direction == DIR_ENCRYPTION) {
		encrypt_(input, output, aes_ctx);
	} else if(aes_ctx->direction == DIR_DECRYPTION) {
		decrypt_(input, output, aes_ctx);
	}

	result = SUCCESSFULL_OPERATION;
FAIL:
	return result;
}

errno_t aesCheckContext_(aes_ctx_st *ctx)
{
	errno_t result;


	if(ctx == NULL) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	if(ctx->keysize != 128 && ctx->keysize != 192 && ctx->keysize != 256) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	if(ctx->Nk != (ctx->keysize >> 5)) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	if(ctx->Nr != ctx->Nk + 6) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	if(ctx->Nw != 4*(ctx->Nr + 1)) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	if(ctx->Nr != 10 && ctx->Nr != 12 && ctx->Nr != 14) {
		result = INVALID_PARAMETER;
		goto FAIL;
	}

	result = SUCCESSFULL_OPERATION;
FAIL:
	return result;
}

 
